<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
    <section name="hibernate-configuration" type="NHibernate.Cfg.ConfigurationSectionHandler,NHibernate" />
    <section name="memcache" type="NHibernate.Caches.MemCache.MemCacheSectionHandler,NHibernate.Caches.MemCache" />
    <sectionGroup name="spring">
      <section name="context" type="Spring.Context.Support.ContextHandler, Spring.Core" />
      <section name="objects" type="Spring.Context.Support.DefaultSectionHandler, Spring.Core" />
      <section name="parsers" type="Spring.Context.Support.NamespaceParsersSectionHandler, Spring.Core" />
    </sectionGroup>
  </configSections>
  
    <hibernate-configuration xmlns="urn:nhibernate-configuration-2.2">
      <session-factory name="NHibernate.Logictracker">
        <property name="connection.connection_string">Server=bd.logictracker.com\MSSQL2K8R2;Initial Catalog=LogicTracker;User ID=logictracker_web;Password=LogicTrackerWWW2013;Pooling=true;Max Pool Size=1000;Network Library=DBMSSOCN;</property>
        <property name="connection.isolation">ReadCommitted</property>
        <property name="command_timeout">180</property>
        <property name="dialect">NHibernate.Dialect.MsSql2005Dialect</property>
        <property name="cache.use_second_level_cache">false</property>
        <property name="cache.use_query_cache">true</property>
        <property name="cache.region_prefix">logictracker_hibernate</property>
        <property name="max_fetch_depth">3</property>
        <property name="query.substitutions">true 1, false 0, yes 'Y', no 'N'</property>
        <property name="show_sql">false</property>
        <property name="proxyfactory.factory_class">NHibernate.ByteCode.LinFu.ProxyFactoryFactory, NHibernate.ByteCode.LinFu</property>
        <property name="cache.default_expiration">900</property>
        <property name="current_session_context_class">call</property>
      </session-factory>
    </hibernate-configuration>
    <memcache>
      <property name="compression_enabled">false</property>
      <property name="max_connections">300</property>
      <memcached host="127.0.0.1" port="11211" />
    </memcache>
  
 <spring>
    <context>
      <resource uri="config://spring/objects" />
    </context>
    <parsers>
      <!-- Registering the parsers for DatabaseNamespace and TransactionNamespace  -->
      <parser type="Spring.Data.Config.DatabaseNamespaceParser, Spring.Data" />
      <parser type="Spring.Transaction.Config.TxNamespaceParser, Spring.Data" />
    </parsers>
        <objects xmlns="http://www.springframework.net" xmlns:db="http://www.springframework.net/database" xmlns:tx="http://www.springframework.net/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.net http://www.springframework.net/xsd/spring-objects.xsd">
      <object type="Spring.Objects.Factory.Config.VariablePlaceholderConfigurer, Spring.Core">
        <property name="VariableSources">
          <list>
            <object type="Spring.Objects.Factory.Config.ConnectionStringsVariableSource, Spring.Core" />
          </list>
        </property>
      </object>
      <tx:attribute-driven />
          
      <!-- MSMQ Transaction Manager -->
      <object id="transactionManager" type="Spring.Messaging.Core.MessageQueueTransactionManager, Spring.Messaging" />

      <!-- My Message Binary Converter to Serialize Messages in MSMQ -->
      <object id="binaryMessageConverter" type="Spring.Messaging.Support.Converters.BinaryMessageConverter, Spring.Messaging" />
      <!-- ///////////////////////////////////////////////////////////////////////////////////////-->
      <!-- MailReportService Message Listener Container that uses MSMQ transactional for receives -->
      <!-- ///////////////////////////////////////////////////////////////////////////////////////-->
      <object id="mailReportServiceMessageListenerContainer" type="Spring.Messaging.Listener.TransactionalMessageListenerContainer, Spring.Messaging">
        <property name="MessageQueueObjectName" value="mailReportServiceInputTxQueue" />
        <property name="PlatformTransactionManager" ref="transactionManager" />
        <property name="MessageListener" ref="mailReportServiceMessageListenerAdapter" />
        <property name="MessageTransactionExceptionHandler" ref="mailReportServiceQueueExceptionHandler" />
        <!-- to increase the number of threads use the MaxConcurrentListeners property -->
        <!--
        <property name="MaxConcurrentListeners" value="10"/>
        -->
      </object>
      
      <!--MailReportService InputQueue Factory-->
      <object id="mailReportServiceInputTxQueue" type="Spring.Messaging.Support.MessageQueueFactoryObject, Spring.Messaging">
        <property name="Path" value=".\Private$\ltracker.mailreportservice.inputqueue" />
        <property name="MessageReadPropertyFilterSetAll" value="true" />
      </object>
      
      <!-- MailReportService Delegate to plain .NET object for message handling -->
      <object id="mailReportServiceMessageListenerAdapter" type="Spring.Messaging.Listener.MessageListenerAdapter, Spring.Messaging">
        <property name="HandlerObject" ref="mailReportServiceMessageHandler" />
        <property name="DefaultHandlerMethod" value="HandleMessage" />
        <property name="MessageConverterObjectName" value="binaryMessageConverter" />
      </object>
      <!-- MailReportServiceMessageHandler Implementation -->
      <object name="mailReportServiceMessageHandler" type="Logictracker.Tracker.Application.Reports.MailReportMessageHandler, Logictracker.Tracker.Application.Reports" autowire="autodetect" />
      
      <object id="mailReportServiceQueueExceptionHandler" type="Spring.Messaging.Listener.SendToQueueExceptionHandler, Spring.Messaging">
        <property name="MessageQueueObjectName" value="mailReportServiceErrorTxQueue" />
      </object>
      
      <object id="mailReportServiceErrorTxQueue" type="Spring.Messaging.Support.MessageQueueFactoryObject, Spring.Messaging">
        <property name="Path" value=".\Private$\ltracker.mailreportservice.errorqueue" />
        <property name="MessageReadPropertyFilterSetAll" value="true" />
      </object>

        <object type="Logictracker.Tracker.Application.Reports.ReportService, Logictracker.Tracker.Application.Reports" singleton="true" autowire="autodetect">
          <property name="MailFrom" value="logictracker.noreply@gmail.com" />
          <property name="SmtpPort" value="587" />
          <property name="SmtpAddress" value="smtp.gmail.com" />
          <property name="Passwd" value="logict2015" />
          <property name="SupportMail" value="julian.millan@logictracker.com" />
        </object>
          
          <object id="reportFactory" type="Logictracker.DAL.Factories.ReportFactory, Logictracker.DAL" autowire="autodetect" />
          <object id="daoFactory" type="Logictracker.DAL.Factories.DaoFactory, Logictracker.DAL" autowire="autodetect" />

        </objects>
  </spring>
 <log4net>
    <appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
      <param name="File" value="tracker-protocolserverhost.log" />
      <param name="CountDirection" value="1" />
      <param name="MaximumFileSize" value="10MB" />
      <param name="MaxSizeRollBackups" value="-1" />
      <param name="DatePattern" value=".yyyy-MM-dd" />
      <layout type="log4net.Layout.PatternLayout">
        <param name="Header" value="DateTime    Thread  Level   Logger  Message%newline" />
        <param name="ConversionPattern" value="%d   %t  %-5p    %c  %m%n" />
      </layout>
    </appender>
    <appender name="EventLogAppender" type="log4net.Appender.EventLogAppender">
      <param name="Threshold" value="ERROR" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="[%thread] %-5level %logger%newline%message" />
      </layout>
    </appender>
    <appender name="ConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
      <mapping>
        <level value="ERROR" />
        <foreColor value="White" />
        <backColor value="Red" />
      </mapping>
      <mapping>
        <level value="WARN" />
        <foreColor value="Yellow" />
      </mapping>
      <mapping>
        <level value="INFO" />
        <foreColor value="White" />
      </mapping>
      <mapping>
        <level value="DEBUG" />
        <foreColor value="White" />
        <backColor value="Blue" />
      </mapping>
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
      </layout>
    </appender>
    <root>
      <level value="ALL" />
      <appender-ref ref="RollingFileAppender" />
      <appender-ref ref="ConsoleAppender" />
      <appender-ref ref="EventLogAppender" />
      <!--<appender-ref ref="SmtpAppender" />-->
    </root>
  </log4net>

  <runtime>

    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">

      <dependentAssembly>

        <assemblyIdentity name="Common.Logging.Core" publicKeyToken="af08829b84f0328e" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-3.2.0.0" newVersion="3.2.0.0" />

      </dependentAssembly>

      <dependentAssembly>

        <assemblyIdentity name="Common.Logging" publicKeyToken="af08829b84f0328e" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-3.2.0.0" newVersion="3.2.0.0" />

      </dependentAssembly>

      <dependentAssembly>

        <assemblyIdentity name="NHibernate" publicKeyToken="aa95f207798dfdb4" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-3.2.0.4000" newVersion="3.2.0.4000" />

      </dependentAssembly>
      <dependentAssembly>

        <assemblyIdentity name="ICSharpCode.SharpZipLib" publicKeyToken="1b03e6acf1164f73" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-0.84.0.0" newVersion="0.84.0.0" />

      </dependentAssembly>

    </assemblyBinding>

  </runtime>
<startup><supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.1" /></startup></configuration>
