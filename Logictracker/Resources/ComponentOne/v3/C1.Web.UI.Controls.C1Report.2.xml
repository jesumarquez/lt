<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Web.UI.Controls.C1Report.2</name>
    </assembly>
    <members>
        <member name="T:C1.Web.UI.Controls.C1Report.UI.C1ReportParamsPane">
            <summary>
            Report parameters pane.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ReportParamsPane.#ctor(C1.Web.UI.Controls.C1Report.C1ReportViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.UI.C1ReportParamsPane"/> class.
            </summary>
            <param name="reportViewer">The report viewer.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ReportParamsPane.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ReportParamsPane.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.Licensing.LicCheck.OnPreRenderCheckLicense(System.Boolean,System.Web.UI.Page,System.Web.UI.Control)">
            <summary>
            Generates the appropriate alert for the control at runtime.  Call this method in the OnPreRender()
            override.
            </summary>
            <param name="isProductLicensed">True if the control has a valid license.</param>
            <param name="page">The page.</param>
            <param name="control">The control.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.Licensing.LicCheck.GetEvalMessageAlertCode(System.String)">
            <summary>
            Gets the eval message alert code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.Licensing.LicCheck.RenderLicenseWebComment(System.Web.UI.HtmlTextWriter,System.Boolean)">
            <summary>
            Call this method from Render override.
            </summary>
            <remarks>This method preliminary used by control developers.</remarks>
            <param name="writer">The System.Web.UI.HtmlTextWriter object that receives the control content.</param>
            <param name="isDesignMode">Boolean flag that identifies design time.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.Localization.C1DescriptionAttribute.#ctor(System.String)">
            <summary>
            Initialize C1DescriptionAttribute.
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:C1.Web.UI.Controls.Localization.C1DescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialize C1DescriptionAttribute.
            </summary>
            <param name="key">Key</param>
            <param name="defaultvalue">Default value</param>
        </member>
        <member name="F:C1.Util.Licensing.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:C1.Util.Licensing.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProviderInfo">
            <summary>
            <para>Provides static <see cref="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)"/> methods that 
            should be called from the constructors of licensed classes.</para>
            <para>Also provides a static <see cref="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)"/> method that can 
            be called to show the about box with product and licensing information.</para>
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>Check the <b>ShouldNag</b> property of the returned <see cref="T:C1.Util.Licensing.LicenseInfo"/> 
            to determine whether the licensed class should nag the user. This value is set
            to true in situations where a valid license was not found but a nag dialog
            could not be displayed. In these cases, the licensed class is supposed to nag
            in some other way (with a watermark for example).</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Boolean)">
            <summary>
            Perform license validation. Call this method from the licensed object's 
            constructor to save a license key at design time, validate it at runtime, 
            and display a nag dialog if a valid license is not found.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object (not currently used).</param>
            <param name="showNagDialog">Whether the nag dialog should be displayed when a valid license is not found.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</returns>
            <remarks>
            <para>This overload was created for use in WPF. It should be called in the control's constructor
            in order to support license persistence correctly. But it should not show the nag dialog until the
            control is fully loaded, or the VS designer may remain blank.</para>
            <para>So the solution is this:</para>
            <code>
            LicenseInfo _licInfo;
            public LicensedControl()
            {
              // check license but don't nag yet
              _licInfo = ProviderInfo.Validate(typeof(LicensedControl), this, false);
              
              // perform licensing after control is fully loaded
              Loaded += LicensedControl_Loaded;
            }
            void LicensedControl_Loaded(object sender, RoutedEventArgs e)
            {
              // nag after loading
              if (_licInfo.ShouldNag)
              {
                ProviderInfo.ShowAboutBox(this);
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Nag(System.Type,C1.Util.Licensing.LicenseInfo,System.Boolean)">
            <summary>
            Nag user by showing AboutBox with license information.
            Show it only once per day per assembly.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="li"><see cref="T:C1.Util.Licensing.LicenseInfo"/> object that contains information about the license.</param>
            <param name="designTime">Whether we're running at design or run time.</param>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.Validate(System.Type,System.Object,System.Reflection.Assembly,System.String)">
            <summary>
            Version of Validate used by constructors that take runtime keys.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="instance">Reference to the licensed object.</param>
            <param name="callingAsm">Assembly that contains the owner licensed control.</param>
            <param name="runtimeKey">Any valid C1 runtime key.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the runtime key.</returns>
            <remarks>
            <para>This allows a licensed C1 class to create other C1 objects bypassing 
            license verification for the child objects.</para>
            <para>For extra safety, we check that the owner object is defined in an assembly
            the contains a 'C1ProductInfo' attribute.</para>
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateDesigntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Design time validation. Looks for a license in the registry and saves it in the
            provided <see cref="T:System.ComponentModel.LicenseContext"/>.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
            <remarks>
            Call this method from application-type products (that always require a license to be
            installed in the registry). In this case, the <paramref name="context"/> parameter 
            should be set to null.
            </remarks>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ValidateRuntime(System.Type,System.ComponentModel.LicenseContext)">
            <summary>
            Runtime validation.
            Looks for a runtime key stored in the current application's resources.
            </summary>
            <param name="type">Type of licensed object (use typeof() and not GetType()).</param>
            <param name="context"><see cref="T:System.ComponentModel.LicenseContext"/> where the runtime key will be stored.</param>
            <returns>A <see cref="T:C1.Util.Licensing.LicenseInfo"/> with information about the license.</returns>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.ShowAboutBox(System.Object)">
            <summary>
            Shows the About Box for an instance of a C1 product.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.ProviderInfo.GetC1Type(System.Object)">
            <summary>
            Get the type whose assembly contains a 'C1ProductInfoAttribute'.
            </summary>
            <param name="instance">Instance of an object whose type is to be checked.</param>
            <returns>The type whose assembly contains a 'C1ProductInfoAttribute'</returns>
        </member>
        <member name="T:C1.Util.Licensing.LicenseInfo">
            <summary>
            Contains information about a license stored in an application.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus,C1.Util.Licensing.ProductLicense)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="M:C1.Util.Licensing.LicenseInfo.#ctor(System.Type,C1.Util.Licensing.LicenseStatus)">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Util.Licensing.LicenseInfo"/> class.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.LicenseStatus">
            <summary>
            Gets or sets the status of this license (valid, expired, unlicensed).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.License">
            <summary>
            Gets or sets the <see cref="T:C1.Util.Licensing.ProductLicense"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Type">
            <summary>
            Gets or sets the <see cref="P:C1.Util.Licensing.LicenseInfo.Type"/> associated with this license.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysElapsed">
            <summary>
            Gets the number of evaluation days elapsed.
            Returns -1 for valid licenses.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.EvaluationDaysLeft">
            <summary>
            Gets the number of evaluation days still left.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.ShouldNag">
            <summary>
            Gets or sets a value that determines whether the caller should
            nag the user. This is the case when the component/control is 
            not licensed, but is not running in interactive mode. So we can't
            show a dialog and the caller is supposed to nag some other way
            (typically by adding watermarks to the UI or output).
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsValid">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsExpired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.IsLocalHost">
            <summary>
            Gets a value that determines whether the component is running under
            localhost and therefore should not nag the user with alert dialogs.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Full">
            <summary>
            Gets a value that determines whether the license found is valid.
            </summary>
        </member>
        <member name="P:C1.Util.Licensing.LicenseInfo.Expired">
            <summary>
            Gets a value that determines whether the license found is expired.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.SafeLicenseContext">
            <summary>
            
            Provides a version of GetSavedLicenseKey that doesn't require
            special permissions.
            
            The code was mostly copied from the .NET framework, but then changed 
            in a few places to require fewer permissions (assembly name, file io, 
            etc). 
            
            The main change is the use of a custom deserializer to read Hashtable 
            objects instead of the original BinaryFormatter, which requires
            permissions.
            
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1AboutNameAttribute">
            <summary>
            Attribute used to specify the product name shown on the About Box.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductInfoAttribute">
            <summary>
            Attribute used to attach licensing/product information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.C1ProductSupportAttribute">
            <summary>
            Attribute used to attach support information to assemblies.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1DescriptionAttribute">
            <summary>
            C1DescriptionAttribute replaces the DescriptionAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1CategoryAttribute">
            <summary>
            C1CategoryAttribute replaces the CategoryAttribute
            and uses the C1Localizer class to return the localized Attribute string
            </summary>
        </member>
        <member name="T:C1.Util.Localization.C1Localizer">
            <summary>
            Localization tables and methods for looking up localized strings.
            </summary>
        </member>
        <member name="T:C1.Util.Localization.StringTables">
            <summary>
            Contains a single static method called InitTables that populates the
            tables used by the C1Localizer class.
            
            ** This file is project-specific **
            Do not include it in your project. Instead, copy it into your project
            and customize the copy with the strings you need.
            </summary>
        </member>
        <member name="T:C1.Util.Licensing.ProductLicense">
            <summary>
            Represents a license for a product (e.g. C1BarCode, C1Studio Enterprise).
            
            Provides methods for:
            - generating new license keys (administrative task)
            - checking license key validity (used by installer and products)
            - generating and checking runtime keys (used by products)
            - installing/uninstalling licenses (used by installer)
            
            The install/uninstall code requires elevated permissions, and is
            used only by setups and utilities (not by controls). The code is 
            implemented in the ProductLicense.Installer.cs, which controls should
            not include since it won't be useful to them.
            
            When a product is sold, we send the user a license KEY. The user installs
            a license on his machine by providing his name, his company name, and the 
            key.
            
            The <see cref="P:C1.Util.Licensing.ProductLicense.Key"/> is a string in the following format:
            
                AAQYYCC-XX-NNNNNN-DD-DZZZZZZ
                
            Where:
            
                AA:     Product code (should match one of the products in the 
                        product catalog (see ProductInformation.GetProductCatalog()).
                Q:      Quarter when the license key was issued (1, 2, or 3)
                YY:     Year when the license key was issued (e.g., 10 for 2010)
                CC:     Order code, two chars that indicate whether this is a 
                        new sale, upgrade, renewal, special offer, etc.
                XX:     Hash code to ensure key validity.
                NNNNNN: Unique serial number.
                DDD:    Vendor code, three chars
                ZZZZZZ: Combination of random numbers for uniqueness and extra hash.
                
            </summary>
        </member>
        <member name="T:C1.C1Zip.C1CryptStream">
            <summary>
            C1CryptStream
            reads and decrypts data from an encrypted zip base stream, or
            encrypts and writes data to an encrypted zip base stream
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckCRC32">
            <summary>
            Calculates a checksum value for the entry and compares it to the checksum that
            was stored when the entry was created.
            </summary>
            <returns>True if the checksum values match, false otherwise.</returns>
            <remarks>
            This method is used to check the integrity of the entries in the zip file. If the
            calculated checksum does not match the stored checksum, then either the zip file is
            corrupted or the program used to create the zip file is incompatible with 
            <b>C1Zip</b>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.CheckPassword">
            <summary>
            Checks whether this <see cref="T:C1.C1Zip.C1ZipEntry"/> can be read with the currently set password.
            </summary>
            <returns>True if the entry can be read with the current password, or if the entry is not
            encrypted.</returns>
            <remarks>
            This method is more efficient than using a try/catch block and trying to open the entry
            to determine whether the current password is valid for the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.OpenReader">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> that can be used to read the content of the entry without
            extracting it to a disk file.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> that can be used to read the data in the entry.</returns>
            <remarks>
            The <see cref="T:System.IO.Stream"/> returned is a <see cref="T:C1.C1Zip.C1ZStreamReader"/>, which 
            decompresses the data as it is read from the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.Extract(System.String)">
            <summary>
            Extracts this entry to a file.
            </summary>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntry.Remove">
            <summary>
            Removes this entry from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.FileName">
            <summary>
            Gets the entry name. This is usually a file name, optionally including a path.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressed">
            <summary>
            Gets the original (uncompressed) size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressed">
            <summary>
            Gets the compressed size of the entry, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.CRC32">
            <summary>
            Gets the checksum calculated when the entry was compressed.
            </summary>
            <remarks>
            This value can be used to check the integrity of the entry when it is decompressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Date">
            <summary>
            Gets the date and time when the file used to create the entry was last modified.
            </summary>
            <remarks>
            This value can be used to check whether an entry needs to be updated because the
            source file was modified since it was last compressed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Comment">
            <summary>
            Gets or sets a comment associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.Attributes">
            <summary>
            Gets the file attributes associated with the entry.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntry.IsEncrypted">
            <summary>
            Gets a value that determines whether the entry is encrypted.
            </summary>
            <remarks>
            Encrypted entries can only be extracted if the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property
            on the containing <see cref="T:C1.C1Zip.C1ZipFile"/> object is set to the password that was used
            when the file was added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <b>ICollection</b> to an Array, starting at a 
            particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from <b>ICollection</b>. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(System.String)">
            <summary>
            Determines whether the collection contains an entry with a given name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>True if the collection contains an entry with the given name, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(C1.C1Zip.C1ZipEntry)">
            <summary>
            Determines whether the collection contains an entry.
            </summary>
            <param name="entry">Entry of the entry to look for.</param>
            <returns>True if the collection contains the entry, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(System.String)">
            <summary>
            Gets the index of the entry with the specified name.
            </summary>
            <param name="name">Name of the entry to look for.</param>
            <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(C1.C1Zip.C1ZipEntry)">
            <summary>
            Gets the index of an entry in the collection.
            </summary>
            <param name="entry"><see cref="T:C1.C1Zip.C1ZipEntry"/> to look for.</param>
            <returns>The index of the entry in the collection, or -1 if the entry was not found.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <remarks>
            By default, the directory name is not stored in the zip file. To store a specific
            part of the directory name in the zip file, use the overloaded version of the 
            <b>Add</b> method with a <b>pathLevels</b> parameter.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String[])">
            <summary>
            Adds a list of entries to the current zip file.
            </summary>
            <param name="fileNames">Array containing the file names of the entries to be added to the zip file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.Int32)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="pathLevels">The number of path levels to be stored as the entry name.</param>
            <remarks>
            <para>By default, path names are not stored in the zip file. For example, adding
            the file "c:\temp\samples\readme.txt" to the zip file will create an entry called
            "readme.txt".</para>
            <para>The <paramref name="pathLevels"/> parameter allows you to store one or more levels of the path in the entry name.
            For example, adding the file "c:\temp\samples\readme.txt" to the zip file with <paramref name="pathLevels"/>=1 
            will create an entry called "samples\readme.txt".</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String)">
            <summary>
            Adds an entry to the current zip file.
            </summary>
            <param name="fileName">Name of the file to add to the zip file.</param>
            <param name="entryName">Name of the new entry as stored in the zip file.</param>
            <remarks>
            By default, entries in the zip file have the same name as the original (uncompressed)
            file. This method allows you to specify a different name, including a path for example.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String)">
            <summary>
            Adds a stream to the current zip file.
            </summary>
            <param name="stream">Stream that contains data for the new entry.</param>
            <param name="entryName">Name to be used for the new entry.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <remarks>
            This method adds all files and sub folders to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <remarks>
            If the folder contains sub folders, those are also added to the zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String,System.Boolean)">
            <summary>
            Adds the content of a folder to the current zip file.
            </summary>
            <param name="path">The full path of the folder to be added to the zip file.</param>
            <param name="searchPattern">A mask that specifies which files to add.</param>
            <param name="includeSubfolders">True to include sub folders, false to include only files at the root level.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.ExtractFolder(System.String)">
            <summary>
            Extracts the contents of the zip file into a specified path.
            </summary>
            <param name="path">Destination path for the unzipped files.</param>
            <remarks>
            If the zip file contains compressed folders, new folders will be created
            under the destination path to preserve the hierarchical structure of the
            archive.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="index">Index of the entry to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String)">
            <summary>
            Removes an entry from the current zip file.
            </summary>
            <param name="fileName">Name of the entry to remove (case-insensitive).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="indices">Array containing the indices of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String[])">
            <summary>
            Removes several entries from the current zip file.
            </summary>
            <param name="entryNames">Array containing the names of the entries to remove.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String,System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <param name="destFileName">Name and location of the extracted file.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="index">Index of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String)">
            <summary>
            Extracts a file from the current zip file. 
            </summary>
            <param name="entryName">Name of the entry to extract.</param>
            <remarks>
            The entry is extracted to a file in the same folder as the current zip
            file, with the same name as the entry.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.Boolean)">
            <summary>
            Opens a stream for writing an entry into the zip file.
            </summary>
            <param name="entryName">The name of the new entry.</param>
            <param name="useMemory">Whether to use a memory stream or temporary file.</param>
            <returns>
            A stream that can be used to write data into the zip file. The entry
            is not added until the stream is closed.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value that indicates whether access to the ICollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <b>ICollection</b>.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Count">
            <summary>
            Gets the number of entries in the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> at the specified index.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:C1.C1Zip.C1ZipEntry"/> with the given name (returns null if the entry cannot be found).
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and creates or opens
            a zip file associated with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open or create.</param>
            <param name="create">True to create a new zip file, false to open an existing file.</param>
            <remarks>
            <para>If <paramref name="create"/> is true and the zip file already exists, it is overwritten
            with a new empty file.</para>
            <para>If <paramref name="create"/> is false and the zip file already exists, the existing file 
            is opened.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip file associated 
            with this new instance.
            </summary>
            <param name="fileName">The name of the zip file to open.</param>
            <remarks>
            If the file does not exist, a new empty file is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
            <param name="create">Whether to initialize the stream with an empty zip header or open an existing
            zip file in the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZipFile"/> class and opens a zip stream associated 
            with this new instance.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains the zip data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.String)">
            <summary>
            Opens an existing zip file.
            </summary>
            <param name="fileName">The name of an existing zip file, including the path.</param>
            <remarks>
            <para>This method checks that the zip file exists and is a valid zip file, then
            reads the zip file directory into the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection.
            The zip file is then closed, and can be used by other applications. There is no
            need to close the zip file explicitly.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.String)">
            <summary>
            Creates an empty zip file on disk.
            </summary>
            <param name="fileName">The name of the zip file to create, including the path.</param>
            <remarks>
            If a file by the same name already exists, it is deleted before the new one
            is created.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Open(System.IO.Stream)">
            <summary>
            Opens an existing zip file stored in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that contains a zip file.</param>
            <remarks>
            <para>This method allows you to open and work with a zip file stored in a stream
            instead of in an actual file.</para>
            <para>Typical usage scenarios for this are zip files stored as application resources 
            or in binary database fields.</para>
            </remarks>
            <example>
            <para>The example below loads information from a zip file stored in an embedded resource. 
            To embed a zip file in an application, follow these steps:</para>
            <para>1) Right-click the project node in Visual Studio, select the <b>Add | Add Existing Item...</b> menu option.</para>
            <para>2) Select a zip file to add to the project as an embedded resource.</para>
            <para>3) Select the newly added file and make sure the <b>Build Action</b> property is set to "Embedded Resource".</para>
            <code>
            // get Stream from application resources
            System.Reflection.Assembly a = this.GetType().Assembly;
            using (Stream stream = a.GetManifestResourceStream("MyApp.test.zip"))
            {
              // open C1ZipFile on the stream
              zip.Open(stream);
            
              // enumerate the entries in the zip file,
              foreach (C1ZipEntry ze in zip.Entries)
              {
                // show entries that have a 'txt' extension.
                if (ze.FileName.ToLower().EndsWith(".txt"))
                {
                  using (StreamReader sr = new StreamReader(ze.OpenReader()))
                  {
                    MessageBox.Show(sr.ReadToEnd(), ze.FileName);
                  }
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Create(System.IO.Stream)">
            <summary>
            Creates a new zip file in a stream.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> that will contain the new zip file.</param>
            <example>
            The code below creates a new <see cref="T:C1.C1Zip.C1ZipFile"/> on a memory stream, then adds
            several files to it. Finally, the code gets the zipped data out as an array of bytes,
            which could be stored in a database for example.
            <code>
            // create zip on a stream
            MemoryStream msZip = new MemoryStream();
            C1ZipFile zip = new C1ZipFile(msZip, true);
            
            // add some entries to it
            foreach (string f in Directory.GetFiles(@"c:\WINDOWS\Web\Wallpaper"))
            {
              zip.Entries.Add(f);
            }
            
            // get zipped data out as a byte array
            byte[] zipData = msZip.ToArray();
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Close">
            <summary>
            Resets all data members of the <see cref="T:C1.C1Zip.C1ZipFile"/> object.
            </summary>
            <remarks>
            Disk files are automatically closed by <b>C1Zip</b>. You only need to use this
            method if you want to break the connection between a <see cref="T:C1.C1Zip.C1ZipFile"/> class 
            and a physical zip file.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.Refresh">
            <summary>
            Refreshes all data members by re-opening the current zip file.
            </summary>
            <remarks>
            This method is useful in instances where other applications may have changed
            the zip file and you want to make sure the information in the <see cref="P:C1.C1Zip.C1ZipFile.Entries"/>
            collection is up to date.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.String)">
            <summary>
            Tests whether a file is a valid zip file.
            </summary>
            <param name="fileName">Name of the file to test.</param>
            <returns>True if the file exists and is a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.IO.Stream)">
            <summary>
            Tests whether a stream contains a valid zip file.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> to test.</param>
            <returns>True if <paramref name="stream"/> contains a valid zip file, false otherwise.</returns>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.OpenBatch">
            <summary>
            Opens the zip file for multiple operations.
            </summary>
            <remarks>
            <para>By default, <see cref="T:C1.C1Zip.C1ZipFile"/> opens and closes the zip file 
            automatically whenever entries are added or removed.</para>
            <para>This can cause delays in systems that have certain types of anti-virus
            software installed, or in situations where you want to add a large number of 
            relatively small entries. In these cases, use the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> and 
            <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> methods to keep the zip file open until the entire 
            operation is concluded.</para>
            <para>Use a finally clause to ensure that the <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch"/> 
            method is called even if an exception occurs.</para>
            </remarks>
            <example>
            The code below opens a zip file, adds several entries to it, then closes 
            the file:
            <code>
            C1ZipFile zip = new C1ZipFile();
            zip.Open(myzipfile);
            try
            {
            	zip.OpenBatch();
            	foreach (string fileName in Directory.GetFiles(path, "*.*"))
            		zip.Entries.Add(fileName);
            }
            finally
            {
            	zip.CloseBatch();
            }
            </code>
            </example>
        </member>
        <member name="M:C1.C1Zip.C1ZipFile.CloseBatch">
            <summary>
            Closes a zip file after it was opened with a call to the 
            <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method.
            </summary>
            <remarks>
            See the <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch"/> method for a complete description 
            and a sample.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.FileName">
            <summary>
            Gets the name of the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Password">
            <summary>
            Gets or sets the password to use when adding or retrieving entries from the 
            zip file.
            </summary>
            <remarks>
            <para>If the <see cref="P:C1.C1Zip.C1ZipFile.Password"/> property is set to a non-empty string, any entries 
            added to the zip file will be encrypted and protected by the password. To extract these 
            entries later, the same password must be used.</para>
            <para>The password applies to all entries from the moment it is set. If you set the 
            password to a non-empty string and then add several entries to the zip file, all
            entries will use the same password.</para>
            <para>Although <b>C1Zip</b> supports Unicode characters in passwords, several popular zip 
            utilities do not. To ensure your encrypted zip files can be opened with third-party
            utilities, use passwords that consist of ASCII characters only.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Comment">
            <summary>
            Gets or sets a comment associated with the current zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.CompressionLevel">
            <summary>
            Gets or sets the compression level to use when adding entries to the zip file.
            </summary>
            <remarks>
            Higher compression settings create smaller files, but take longer to process. The
            default setting (<see cref="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression"/>) provides 
            a good trade-off between compression and speed.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.Entries">
            <summary>
            Gets a <see cref="T:C1.C1Zip.C1ZipEntryCollection"/> that contains the entries in the zip file.
            </summary>
            <remarks>
            The <see cref="P:C1.C1Zip.C1ZipFile.Entries"/> collection is used to enumerate the entries in the zip file,
            and also to add, remove, and expand entries.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteReadOnly">
            <summary>
            Determines whether the component should overwrite read-only files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteHidden">
            <summary>
            Determines whether the component should overwrite hidden files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.OverwriteSystem">
            <summary>
            Determines whether the component should overwrite system files when extracting 
            entries from the zip file.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.MemoryThreshold">
            <summary>
            Gets or sets the size of the largest stream to be compressed in memory.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> compresses entries into temporary streams before
            adding them to the zip file.</para>
            <para>Entries with fewer than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary memory stream.</para>
            <para>Entries with more than <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> bytes are compressed
            using a temporary file. You can control the location of the temporary file using
            the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property.</para>
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZipFile.TempFileName">
            <summary>
            Gets or sets the name of the temporary file to use when adding entries to the zip file.
            </summary>
            <remarks>
            <para><see cref="T:C1.C1Zip.C1ZipFile"/> creates temporary streams while adding entries to a zip file.
            These temporary streams can be memory-based or disk-based, depending on the size of the
            entry and on the setting of the <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold"/> property.</para>
            If a temporary file is used, <see cref="T:C1.C1Zip.C1ZipFile"/> you can control its location by 
            setting the <see cref="P:C1.C1Zip.C1ZipFile.TempFileName"/> property. If you don't select a path for the 
            temporary file, <see cref="T:C1.C1Zip.C1ZipFile"/> will create one automatically using the 
            <see cref="M:System.IO.Path.GetTempFileName"/> method.
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZipEncoding">
            <summary>
            Encoding used for entry names and comments
            
            NOTE: this is culture-dependent, which is a really bad idea, but most zip packers
            use the default OEM code page to encode file names, so we have to go along with it...
            
            Note that Encoding.Default seems like a logical choice but doesn't really work for
            international locales. Instead, we need to create an encoding using the current
            OEMCodePage. That allows accents and international characters to be used in file
            names (like the zip built into Windows, allows names such as "Åland.txt", "Äiti.txt", 
            "Würth.txt", etc.).
            
            This has nothing to do with compression, it's just used to encode and decode entry 
            names and comments.
            
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZipFileException">
            <summary>
            Exception thrown when trying to open an invalid Zip file.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:System.IO.FileLoadException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:System.IO.FileLoadException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
            <param name="filename">Name of the file that caused the exception.</param>
        </member>
        <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of a <see cref="T:System.IO.FileLoadException"/>.
            </summary>
            <param name="msg">Message that describes the exception.</param>
            <param name="filename">Name of the file that caused the exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <remarks>
            The <paramref name="sizeCompressed"/> parameter is needed only when a single stream contains
            several compressed streams (in zip files for example). If this parameter is not 
            specified, it is assumed that the stream contains a single stream of compressed data.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="header">Specifies whether the compressed stream contains header information (should be False for streams in zip files).</param>
            <param name="crc32">Specifies whether the compressed stream contains a CRC32 checksum (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
            <param name="baseStream">Input stream that contains the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream was created in zip format.</param>
            <param name="sizeCompressed">Specifies the number of compressed bytes to read from the stream.</param>
            <param name="method">Specifies the method that was used to compress the stream.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.SetLength(System.Int64)">
            <summary>
            Sets the number of compressed bytes to read from the underlying stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the underlying compressed stream, decompressing them into
            a buffer, then advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buf">An array of bytes. When this method returns, <paramref name="buff"/> contains the specified byte array with the values between <paramref name="offset"/>and (<paramref name="offset"/> + <paramref name="count"/>) replaced by the uncompressed data read from the stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buff"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of (decompressed) bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This may be less than the number of bytes 
            requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is overridden and is not supported by the <see cref="T:C1.C1Zip.C1ZStreamReader"/> class.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamReader.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream 
            by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an <see cref="T:System.Int32"/>, or -1 if at 
            the end of the stream.
            </returns>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.BaseStream">
            <summary>
            Gets the underlying stream that contains the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamReader.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamReader.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanRead">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanWrite">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Length">
            <summary>
            Gets the length of the compressed stream if it is known (or -1 if the
            length of the compressed stream is unknown).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamReader.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.NoCompression">
            <summary>
            No Compression.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestSpeed">
            <summary>
            Low compression, highest speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.BestCompression">
            <summary>
            Highest compression, low speed.
            </summary>
        </member>
        <member name="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression">
            <summary>
            High compression, high speed.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
            <remarks>
            <para>Streams in zip files are different from regular zlib streams in two aspects:</para>
            <para>(1) zip streams do not contain any local header information (the information is stored in the zip file headers instead) and</para>
            <para>(2) zip streams use a CRC32 checksum instead of the adler32 checksum used by zlib streams.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="zip">Specifies whether the compressed stream should be compatible with zip files.</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> class.
            </summary>
            <param name="baseStream">Output stream that will contain the compressed data.</param>
            <param name="level">Compression level to use when compressing data.</param>
            <param name="header">Include header information in compressed stream (should be False for streams in zip files).</param>
            <param name="crc32">Include CRC32 checksum in compressed stream (should be True for streams in zip files).</param>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.SetLength(System.Int64)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current 
            position within this stream by the number of bytes written.
            </summary>
            <param name="buf">An array of bytes. This method copies <paramref name="count"/> bytes from
            <paramref name="buf"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buf"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <remarks>
            The data is compressed as it is written into the stream. Writing <paramref name="count"/> bytes
            into the stream will usually advance the position by a number smaller than <paramref name="count"/>.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying 
            stream.
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.Close">
            <summary>
            <para>Closes the current stream compressor and flushed any pending data into the base stream.</para>
            <para>If the <see cref="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream"/> property is set to True (the default value), 
            then this method also closes the base stream and releases any resources (such as sockets 
            and file handles) associated with it.</para>
            </summary>
        </member>
        <member name="M:C1.C1Zip.C1ZStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte.
            </summary>
            <param name="value">Value to be written to the stream.</param>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.BaseStream">
            <summary>
            Gets the underlying stream that receives the compressed data.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream">
            <summary>
            Gets or sets whether calling the <see cref="M:C1.C1Zip.C1ZStreamWriter.Close"/> method will also
            close the underlying stream (see <see cref="P:C1.C1Zip.C1ZStreamWriter.BaseStream"/>).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Checksum">
            <summary>
            Gets the checksum value used to check the integrity of the stream.
            </summary>
            <remarks>
            The checksum used may be an Adler or crc32 value depending on how
            the <see cref="T:C1.C1Zip.C1ZStreamWriter"/> was created.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressed">
            <summary>
            Gets the number of bytes in the stream (compressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressed">
            <summary>
            Gets the number of bytes that were compressed into the stream (uncompressed bytes).
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.ZStream">
            <summary>
            Gets the ZStream instance wrapped by this <see cref="T:C1.C1Zip.C1ZStreamWriter"/>.
            </summary>
            <remarks>
            This property is useful only in advanced applications that need to customize 
            the low-level behavior of the compressor. It is not needed in common applications.
            </remarks>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanRead">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanWrite">
            <summary>
            Always returns True.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.CanSeek">
            <summary>
            Always returns False.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Length">
            <summary>
            Returns the length of the underlying stream, in bytes.
            </summary>
        </member>
        <member name="P:C1.C1Zip.C1ZStreamWriter.Position">
            <summary>
            Gets the position within the stream (read-only).
            </summary>
        </member>
        <member name="T:C1.C1Zip.StringTables">
            <summary>
            Provide localization for error messages in Japanese.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZipEntryStreamWriter">
            <summary>
            ZipEntryStreamWriter
            Extends C1ZStreamWriter to provide the following:
            1) Creates a memory or temporary storage stream.
            2) Keeps track of the parent zip file.
            3) Overrides Close to add the compressed stream to the zip file.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.IChecksum">
            <summary>
            Interface ICheckSum
            implemented by the Adler32 and CRC32 objects.
            Adler32 is a faster checksum used by the native ZLib
            CRC32   is the default checksum used in ZIP files
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.CRC32">
            <summary>
            Summary description for CRC32.
            methods are called Adler to keep zlib source code
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Deflate">
            <summary>
            Summary description for Deflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfBlocks">
            <summary>
            Summary description for InfBlocks.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfCodes">
            <summary>
            Summary description for InfCodes.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Inflate">
            <summary>
            Summary description for Inflate.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.InfTree">
            <summary>
            Summary description for InfTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.StaticTree">
            <summary>
            Summary description for StaticTree.
            </summary>
        </member>
        <member name="T:C1.C1Zip.ZLib.Tree">
            <summary>
            Summary description for Tree.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_OK">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_END">
            <summary>
            End of stream detected.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_NEED_DICT">
            <summary>
            A preset dictionary is needed at this point.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_ERRNO">
            <summary>
            File error.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_ERROR">
            <summary>
            Stream structure is inconsistent (input/output buffers are null for example).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_DATA_ERROR">
            <summary>
            Input data is corrupted (wrong format or checksum).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_MEM_ERROR">
            <summary>
            Not enough memory.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_BUF_ERROR">
            <summary>
            No progress possible or no room in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.Z_VERSION_ERROR">
            <summary>
            Incompatible ZLIB version.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in">
            <summary>
            Input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_in_index">
            <summary>
            Position of cursor into input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_in">
            <summary>
            Number of bytes available in the input buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_in">
            <summary>
            Total number of input bytes read so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out">
            <summary>
            Output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.next_out_index">
            <summary>
            Position of cursor into the output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.avail_out">
            <summary>
            Number of free bytes remaining in output buffer.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.total_out">
            <summary>
            Total number of bytes output so far.
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.msg">
            <summary>
            Description of the last error (null if no errors).
            </summary>
        </member>
        <member name="F:C1.C1Zip.ZLib.ZStream.adler">
            <summary>
            Current checksum value (Adler or CRC32).
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class using an Adler checksum.
            </summary>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <b>ZStream</b> class.
            </summary>
            <param name="crc32"><b>True</b> to use a CRC32 checksum, <b>False</b> to use an Adler checksum.</param>
            <remarks>
            CRC32 checksums are the standard used in zip files. Adler checksums are the default
            used by ZLIB. Adler checksums are faster to calculate, but are not compatible with the zip format.
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>The fields <see cref="F:C1.C1Zip.ZLib.ZStream.next_in"/> and <see cref="F:C1.C1Zip.ZLib.ZStream.avail_in"/> must be 
            initialized before by the caller.</para>
            <para><b>inflateInit</b> does not perform any decompression apart from reading the 
            zlib header if present: data decompression is done by the <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            method. Therefore, the <b>next_in</b> and <b>avail_in</b> may be modified, but 
            <b>next_out</b> and <b>avail_out</b> are unchanged.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for decompression.
            </summary>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)">
            <summary>
            Decompresses as much data as possible until the input buffer is exhausted or 
            the output buffer is full.
            </summary>
            <param name="flush">How to flush data into the output buffer (default value is 2).</param>
            <returns>
            <b>Z_OK</b> if some progress has been made (more input processed or more output produced), 
            <b>Z_STREAM_END</b> if the end of the compressed data has been reached and all 
            uncompressed output has been produced, 
            <b>Z_NEED_DICT</b> if a preset dictionary is needed at this point, 
            <b>Z_DATA_ERROR</b> if the input data was corrupted (input stream not conforming to 
            the zlib format or incorrect checksum), 
            <b>Z_STREAM_ERROR</b> if the stream structure was inconsistent (for example if 
            <b>next_in</b> or <b>next_out</b> was null), 
            <b>Z_MEM_ERROR</b> if there was not enough memory,
            <b>Z_BUF_ERROR</b> if no progress is possible or if there was not enough room in the 
            output buffer when <b>Z_FINISH</b> is used.
            </returns>
            <remarks>
            <para><b>inflate</b> performs one or both of the following actions:</para>
            
            <para>1. Decompress more input starting at <b>next_in</b> and update <b>next_in</b>
            and <b>avail_in</b> accordingly. If not all input can be processed (because there 
            is not enough room in the output buffer), <b>next_in</b> is updated and processing 
            will resume at this point for the next call to inflate.</para>
            
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b>
            and <b>avail_out</b> accordingly. <b>inflate</b> provides as much output as 
            possible, until there is no more input data or no more space in the output buffer.</para>
            
            <para>Before the call to inflate, the application should ensure that at least one of the 
            actions is possible, by providing more input and/or consuming more output, and 
            updating the <b>next_*</b> and <b>avail_*</b> values accordingly.</para>
            
            <para>If <b>inflate</b> returns Zero and <b>avail_out</b> == 0, it must be called again 
            after making room in the output buffer because there might be more output pending.</para>
            
            <para>The application can consume the uncompressed output when it wants, for example when 
            the output buffer is full (<b>avail_out</b> == 0), or after each call of <b>inflate</b>.</para>
            
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSync">
            <summary>
            Skips invalid compressed data until a full flush point is found, 
            or until all available input is skipped. No output is provided.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the decompression dictionary from the given uncompressed byte sequence.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after a call of <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)"/> 
            if this call returned <b>Z_NEED_DICT</b>. The dictionary chosen by the compressor 
            can be determined from the <b>Adler32</b> value returned by this call to <b>inflate</b>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see the <see cref="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)"/> method).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
            <summary>
            Initializes the internal stream state for compression.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="bits">Size of the LZ77 sliding compression window in bits (the default value is 15 bits).</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>Compression level 1 gives best speed, 9 gives best compression.</para>
            <para>Compression level zero gives no compression at all (the input data is simply copied a block at a time).</para>
            <para>The default compression level is 6, which provides a compromise between speed and compression.</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)">
            <summary>
            Compresses as much data as possible, and stops when the input buffer becomes empty or the 
            output buffer becomes full.
            </summary>
            <param name="flush">Non-zero to force some data to be flushed into the output buffer.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para><b>deflate</b> performs one or both of the following actions:</para>
            <para>1. Compress more input starting at <b>next_in</b> and update <b>next_in</b> and 
            <b>avail_in</b> accordingly. If not all input can be processed (because there is not 
            enough room in the output buffer), <b>next_in</b> and <b>avail_in</b> are updated and 
            processing will resume at this point for the next call to <b>deflate</b>.</para>
            <para>2. Provide more output starting at <b>next_out</b> and update <b>next_out</b> and 
            <b>avail_out</b> accordingly. This action is forced if the parameter <paramref name="flush"/> is 
            non zero. Forcing flush frequently degrades the compression ratio, so this parameter 
            should be set only when necessary (in interactive applications). Some output may be 
            provided even if flush is not set</para>
            <para>This method may introduce some output latency (reading input without producing 
            any output) except when forced to flush.</para>
            <para>If <b>deflate</b> returns with <b>avail_out</b> == 0, this method must be called 
            again with the same value of the <paramref name="flush"/> parameter and more output space 
            until the flush is complete (<b>deflate</b> returns with <b>avail_out</b> != 0).</para>
            </remarks>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateEnd">
            <summary>
            Frees all dynamically allocated data structures for this stream, 
            discards any unprocessed input, and does not flush any pending output.
            </summary>
            <returns>Zero on success, an error code on failure.</returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateParams(System.Int32,System.Int32)">
            <summary>
            Dynamically updates the compression level and compression strategy.
            </summary>
            <param name="level">Compression level between zero and nine (0-9).</param>
            <param name="strategy">Compression strategy (0-2).</param>
            <returns></returns>
        </member>
        <member name="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
            <summary>
            Initializes the compression dictionary from the given byte sequence without 
            producing any compressed output.
            </summary>
            <param name="dictionary">Data in the dictionary.</param>
            <param name="dictLength">Number of bytes in the dictionary.</param>
            <returns>Zero on success, an error code on failure.</returns>
            <remarks>
            <para>This method must be called immediately after <see cref="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)"/>,
            before any call to <see cref="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)"/>.</para>
            <para>The compressor and decompressor must use exactly the same dictionary 
            (see <see cref="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)"/>).</para>
            </remarks>
        </member>
        <member name="T:C1.C1Zip.ZLib.ZStreamException">
            <summary>
            The exception that is thrown when reading or writing to a compressed stream fails.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.C1ReportViewer">
            <summary>
            Represents a report in an ASP.NET Web page.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.#ctor">
            <summary>
            C1Report constructor.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.CreateC1Report">
            <summary>
            Creates a new instance of <see cref="T:C1.C1Report.C1Report"/>
            with its properties adjusted to better work with <c>C1ReportViewer</c>.
            This method creates a licensed instance of <c>C1Report</c> provided
            it is invoked on a licensed instance of <see cref="T:C1.Web.UI.Controls.C1Report.C1ReportViewer"/>.
            </summary>
            <returns>The new instance of <see cref="T:C1.C1Report.C1Report"/>.</returns>
            <remarks>
            The following properties are adjusted on the created <see cref="T:C1.C1Report.C1Report"/>:
            <list type="bullet">
            <item>
            <see cref="P:C1.C1Report.C1Report.UseGdiPlusTextRendering"/> is set to <c>true</c>;
            </item>
            <item>
            <see cref="P:C1.C1Report.C1Report.EmfType"/> is set to <c>EmfType.EmfPlusOnly</c>;
            </item>
            <item>
            <see cref="P:C1.C1Report.C1Report.ColorizeHyperlinks"/> is set to <c>true</c>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.CreateC1PrintDocument">
            <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.C1PrintDocument"/>
            with its properties adjusted to better work with <c>C1ReportViewer</c>.
            This method creates a licensed instance of <c>C1PrintDocument</c> provided
            it is invoked on a licensed instance of <see cref="T:C1.Web.UI.Controls.C1Report.C1ReportViewer"/>.
            </summary>
            <returns>The new instance of <see cref="T:C1.C1Preview.C1PrintDocument"/>.</returns>
            <remarks>
            The following properties are adjusted on the created <see cref="T:C1.C1Preview.C1PrintDocument"/>:
            <list type="bullet">
            <item>
            <see cref="P:C1.C1Preview.C1PrintDocument.UseGdiPlusTextRendering"/> is set to <c>true</c>;
            </item>
            <item>
            <see cref="P:C1.C1Preview.C1PrintDocument.EmfType"/> is set to <c>EmfType.EmfPlusOnly</c>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.CreateC1RdlReport">
            <summary>
            Creates a new instance of <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport"/>
            with its properties adjusted to better work with <c>C1ReportViewer</c>.
            This method creates a licensed instance of <c>C1RdlReport</c> provided
            it is invoked on a licensed instance of <see cref="T:C1.Web.UI.Controls.C1Report.C1ReportViewer"/>.
            </summary>
            <returns>The new instance of <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport"/>.</returns>
            <remarks>
            The following properties are adjusted on the created <see cref="T:C1.C1Rdl.Rdl2008.C1RdlReport"/>:
            <list type="bullet">
            <item>
            <see cref="P:C1.C1Rdl.Rdl2008.C1RdlReport.UseGdiPlusTextRendering"/> is set to <c>true</c>;
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.CreateC1MultiDocument">
            <summary>
            Creates a new instance of <see cref="T:C1.C1Preview.C1MultiDocument"/>
            with its properties adjusted to better work with <c>C1ReportViewer</c>.
            This method creates a licensed instance of <c>C1MultiDocument</c> provided
            it is invoked on a licensed instance of <see cref="T:C1.Web.UI.Controls.C1Report.C1ReportViewer"/>.
            </summary>
            <returns>The new instance of <see cref="T:C1.C1Preview.C1MultiDocument"/>.</returns>
            <remarks>
            The following properties are adjusted on the created <see cref="T:C1.C1Preview.C1MultiDocument"/>:
            <list type="bullet">
            <item>
            <see cref="P:C1.C1Preview.C1MultiDocument.UseGdiPlusTextRendering"/> is set to <c>true</c>;
            </item>
            <item>
            <see cref="P:C1.C1Preview.C1MultiDocument.EmfType"/> is set to <c>EmfType.EmfPlusOnly</c>.
            </item>
            <item>
            <see cref="P:C1.C1Preview.C1MultiDocument.ColorizeHyperlinks"/> is set to <c>true</c>.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.GetReportList(System.String)">
            <summary>
            Gets array of the available report names for given report file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.GetDialogTemplateContent(System.String)">
            <summary>
            Gets the content of the dialog template.
            </summary>
            <param name="dialogName">Name of the dialog.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.RenderDesignTimeStyleSheets(System.Web.UI.HtmlTextWriter,System.Boolean)">
            <summary>
            Override this method if you want to render additional stylesheets definitions what will be used by control only at design-time.
            </summary>
            <remarks>Primarily this method used by control developers.
            Note, stylesheet styles.css from embedded VisualStyle will be included automatically by VisualStyle mechanism.</remarks>
            <param name="writer"></param>
            <param name="beforeVisualStyle"></param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.RegisterRunTimeStyleSheets(System.Boolean)">
            <summary>
            Override this method if you want to render additional style sheets definitions what will be used by control only at run-time.
            </summary>
            <remarks>
            Primarily this method is used by control developers. Note, style sheet styles.css from embedded VisualStyle will be included automatically by VisualStyle mechanism.
            </remarks>
            
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.IsToolAvailable(C1.Web.UI.Controls.C1Report.AvailableReportTools)">
            <summary>
            Determines whether tool is available.
            </summary>
            <param name="reportTool">The report tool.</param>
            <returns>
            	<c>true</c> if tool given by parameter reportTool is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:PreRender"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            AddAttributesToRender override
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the control to the specified HTML writer.
            </summary>
            <param name="writer">The System.Web.UI.HtmlTextWriter object that receives the control content.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.RenderChildren(System.Web.UI.HtmlTextWriter)">
            <summary>
            Outputs the content of a server control's children to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"/> object that receives the rendered content.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.GetCallbackResult">
            <summary>
            Returns the results of a callback event that targets a control.
            </summary>
            <returns>The result of the callback.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.RaiseCallbackEvent(System.String)">
            <summary>
            Processes a callback event that targets a control.
            </summary>
            <param name="eventArgument">A string that represents an event argument to pass to the event handler.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.SaveLayout(System.String)">
            <summary>
            Saves the control layout properties to the XML file.
            </summary>
            <param name="filename">Path to the file where the values of the layout properties will be saved.</param> 
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.SaveLayout(System.IO.Stream)">
            <summary>
            Saves control layout properties to the stream.
            </summary>
            <param name="stream">The stream where the values of layout properties will be saved.</param> 
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.LoadLayout(System.String)">
            <summary>
            Loads control layout properties from the file.
            </summary>
            <param name="filename">The file where the values of layout properties will be loaded.</param> 
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.LoadLayout(System.IO.Stream)">
            <summary>
            Load control layout properties from the stream.
            </summary>
            <param name="stream">The stream where the values of layout properties will be loaded.</param> 
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.LoadLayout(System.String,C1.Web.UI.LayoutType)">
            <summary>
            Loads control layout properties with specified types from the XML file.
            </summary>
            <param name="filename">The file where the values of layout properties will be loaded.</param> 
            <param name="layoutTypes">The layout types to load.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.LoadLayout(System.IO.Stream,C1.Web.UI.LayoutType)">
            <summary>
            Loads the control layout properties with specified types from the stream.
            </summary>
            <param name="stream">The stream where the values of the layout properties will be loaded.</param> 
            <param name="layoutTypes">The layout types to load.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Processes postback data for an ASP.NET server control.
            </summary>
            <param name="postDataKey">The key identifier for the control.</param>
            <param name="postCollection">The collection of all incoming name values.</param>
            <returns>true if the server control's state changes as a result of the postback; otherwise, false.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.RaisePostDataChangedEvent">
            <summary>
            Notify the ASP.NET application that the state of the control has changed.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.RaisePostBackEvent(System.String)">
            <summary>
            Process an event
            raised when a form is posted to the server.
            </summary>
            <param name="eventArgument">A System.String that represents an optional event argument to be passed to
            the event handler.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.GetScriptDescriptors">
            <summary>
            GetScriptDescriptors override.
            </summary>
            <returns>List with script descriptors.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportViewer.GetScriptReferences">
            <summary>
            GetScriptReferences override.
            </summary>
            <returns>List with script references.</returns>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.Width">
            <summary>
            Gets or sets the width of the control.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.Height">
            <summary>
            Gets or sets the height of the control.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.AvailableTools">
            <summary>
            Gets or sets the set of tools that will be available to the user.
            </summary>
            <value>The available tools.</value>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ExpandedTool">
            <summary>
            Gets or sets the default tool that will be expanded in the tools pane.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.Cache">
            <summary>
            Gets a reference to the <see cref="T:C1.Web.UI.Controls.C1Report.ReportService.ReportCache"/> object that controls how reports 
            are cached on the server.
            </summary>
            <remarks>
            <para>The report cache is one of the most powerful features in the <see cref="T:C1.Web.UI.Controls.C1Report.C1ReportViewer"/>
            control. By default, every time the control renders a report, it compresses the resulting 
            Html stream and stores it in the <see cref="P:System.Web.UI.Page.Cache"/> object. If the same report is 
            requested again, the control simply fetches it back from the cache and sends it directly 
            to the client. This results in fast response times and consumes little memory (because the 
            reports are cached in compressed form).</para>
            <para>The control is smart enough to detect changes to the report definition and keep track 
            of different versions in the cache. It also detects changes to the report definition file 
            and discards old reports from the cache.</para>
            <para>The cache object itself is provided by the ASP.NET framework (<see cref="P:System.Web.UI.Page.Cache"/> 
            property), and can be set up to match your server configuration, including Web Farm scenarios.</para>
            <para>The <see cref="T:C1.Web.UI.Controls.C1Report.ReportService.ReportCache"/> object allows you to disable the cache, specify time out 
            values, and add dependencies (to data source files for example).</para>
            </remarks>
            <example>
            The code below configures the <see cref="T:C1.Web.UI.Controls.C1Report.ReportService.ReportCache"/> to keep rendered reports in the 
            cache for one hour, renewing the time out period every time a report is retrieved from the
            cache. It also adds a dependency on a SQL server database file, so whenever the underlying 
            data changes, the control know that the report must be rendered again (the report definition 
            file is automatically added as a dependency).
            <code>
            // enable cache
            _c1wr.Cache.Enabled = true;
            
            // cached reports expire after one hour
            _c1wr.Cache.Expiration = 60;
            
            // renew one-hour limit whenever a report is retrieved from the cache
            _c1wr.Cache.Sliding = true;
            </code>
            </example>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.IsGenerating">
            <summary>
            Indicates whether the report is currently generating.
            Note that even if this property returns true, some pages may 
            already be available for viewing..
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.DocumentStatus">
            <summary>
            Gets the common information about current report.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.HasCachedDocument">
            <summary>
            Gets a value indicating whether a previously cached report or document is available.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.HttpHandlerUrl">
            <summary>
            Gets the HTTP handler URL.
            </summary>
            <value>The HTTP handler URL.</value>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.CurrentPageIndex">
            <summary>
            Gets or sets the index of the page being viewed (0-based).
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.Document">
            <summary>
            Gets or sets the document or report to view.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.PageCount">
            <summary>
            Gets the number of pages in the current report.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.PagedView">
            <summary>
            Specifies whether the viewer must show document pages individually (with scrollbars covering the current page only) or continously (with scrollbars covering the whole document).
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.PreRenderPageCount">
            <summary>
            Gets or sets the number of pages that will be pre-rendered for report view from server.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ToolBarVisible">
            <summary>
            Gets or sets a value indicating whether top pane will be visible.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ToolsPaneVisible">
            <summary>
            Gets or sets a value indicating whether tools pane will be visible.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.Zoom">
            <summary>
            Gets or sets page zoom value. Accepts named zoom values like "Actual Size", "Fit Page", "Fit Width" or value in percentages, e.g. "50%", "70%"
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ReportService">
            <summary>
            Gets the report service. Returns null at design time and when control disabled.
            </summary>
            <value>The report service.</value>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.FileName">
            <summary>
            Gets or sets the name of the file with report.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ReportName">
            <summary>
            Gets or sets the name of the report to view.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ViewType">
            <summary>
            This property is hidden.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ReportsFolderPath">
            <summary>
            Gets or sets the relative path to folder that will be used to store generated report data.
            </summary>
            <value>The relative path to folder that will be used to store generated report data.</value>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.AccessKey">
            <summary>
            Gets or sets the access key that allows you to quickly navigate 
            to the Web server control.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.VisualStylePath">
            <summary>
            Path to visual styles.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.EmbeddedVisualStyles">
            <summary>
            Returns string array with embedded Visual Styles names.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.VisualStyle">
            <summary>
            Gets or sets the visual style name used by the control.
            </summary>
            <remarks>
            "ArcticFox" is default value.
            </remarks>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.TagKey">
            <summary>
            Gets the <see cref="T:System.Web.UI.HtmlTextWriterTag"/> value that corresponds to this Web server control. This property is used primarily by control developers.
            </summary>
            <value></value>
            <returns>
            One of the <see cref="T:System.Web.UI.HtmlTextWriterTag"/> enumeration values.
            </returns>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.UniqueID">
            <summary>
            Gets the unique, hierarchically qualified identifier for the server control.
            </summary>
            <value></value>
            <returns>
            The fully qualified identifier for the server control.
            </returns>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.Enabled">
            <summary>
            Gets or sets if report item is Enabled.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.Visible">
            <summary>
            Gets or sets if report is Visible.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.DisplayVisible">
            <summary>
            Gets or sets a value that indicates whether control will be visible or not.
            </summary>
            <remarks>
            Returns true if the control is visible on the page; otherwise false.
            </remarks>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ToolTip">
            <summary>
            Gets or sets tooltip text what will be displayed when mouse is over item. 
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.BackColor">
            <summary>
            This property is hidden.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.BorderColor">
            <summary>
            This property is hidden.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.BorderStyle">
            <summary>
            This property is hidden.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.BorderWidth">
            <summary>
            This property is hidden.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.Font">
            <summary>
            This property is hidden.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ForeColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.EnableTheming">
            <summary>
            This property is hidden.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.EnableViewState">
            <summary>
            This property is hidden.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ResourceNameFormat">
            <summary>
            Gets the resource name format.
            </summary>
            <value>The resource name format.</value>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.ToolBar">
            <summary>
            Gets the tool bar control. Use this property to customize toolbar at runtime. Note, property returns null when ToolBarVisible property is false.
            </summary>
            <value>The tool bar.</value>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.RezolvedZoom">
            <summary>
            Gets or sets page zoom value in percentages.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.C1ReportViewer.PreloadedPageImagesMarkup">
            <summary>
            Gets the preloaded page images markup. Returns null when ViewType is not PageImages. 
            This property preliminary used by control developers.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.C1WindowStatusTemplate">
            <summary>
            C1Window Status Template
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1WindowStatusTemplate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.C1WindowStatusTemplate"/> class.
            </summary>
            <param name="statusText">The status text.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1WindowStatusTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            Defines the System.Web.UI.Control object that
            child controls and templates belong to. These child controls are in turn
            defined within an inline template.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.C1ReportSerializer">
            <summary>
            C1Report serializer.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportSerializer.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="serializableObject">Serializable Object.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.C1ReportSerializer.#ctor(System.ComponentModel.Design.IComponentChangeService,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="componentChangeService"></param>
            <param name="serializableObject"></param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportTools">
            <summary>
            Report Tools.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportTools.Outline">
            <summary>
            Outline tool.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportTools.Search">
            <summary>
            Search tool.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.AvailableReportTools">
            <summary>
            Available report tools enumeration.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.AvailableReportTools.None">
            <summary>
            No tools are available to user.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.AvailableReportTools.Outline">
            <summary>
            Outline pane.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.AvailableReportTools.Search">
            <summary>
            Search pane.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.AvailableReportTools.All">
            <summary>
            All tools are available to user.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ConnectionStatus">
            <summary>
            Connection Status.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ConnectionStatus.Idle">
            <summary>
            No active connections and no errors detected.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ConnectionStatus.Normal">
            <summary>
            Normal connection. Server response time is 0-7 sec.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ConnectionStatus.Low">
            <summary>
            Low connection. Server response time is 8-30 sec.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ConnectionStatus.Warning">
            <summary>
            Connection warning. Server response time is 31-60 sec.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ConnectionStatus.Fail">
            <summary>
            Server not responded during 61 sec.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper">
            <summary>
            C1WebReportService Helper to use with C1ReportViewer ASP .NET control.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.IC1WebReportService">
            <summary>
            Interface that must implemented by C1WebReport service.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.GetDocumentStatus(System.String,System.String,C1.Web.UI.Controls.C1Report.ReportParameterValue[],System.String)">
            <summary>
            Retrieves a document's or report's status by file/report/parameters.
            </summary>
            <param name="fileName">Document or report file name.</param>
            <param name="reportName">Report name.</param>
            <param name="paramValues">Report parameter values.</param>
            <param name="cookie">Arbitrary string that was passed back from the service in DocumentStatus
            in the previous GetDocumentStatus call, or null if there was no previous call.</param>
            <returns>
            A <see cref="T:C1.Web.UI.Controls.C1Report.DocumentStatus"/> instance containing information about the requested document.
            </returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.GetDocumentKey(System.String,System.String,C1.Web.UI.Controls.C1Report.ReportParameterValue[])">
            <summary>
            Gets a key that can be used to access a cached document.
            </summary>
            <param name="fileName"></param>
            <param name="reportName"></param>
            <param name="paramValues"></param>
            <returns>The document key.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.GetPageImagesMarkup(System.String,System.Int32,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Gets the document/report page images markup.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <param name="dpi">Client screen resolution.</param>
            <param name="zoom">Zoom, in percent (100 is actual size).</param>
            <param name="pageIndices">The page indices that must be loaded.</param>
            <param name="getImagesOnly">if set to <c>true</c> this method will generate page images only without information about document text.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.GetUnpagedHtmlMarkup(System.String)">
            <summary>
            Gets the HTML report markup.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.GetPageHtmlMarkup(System.String,System.Int32)">
            <summary>
            Gets the page HTML markup.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <param name="pageIndex">Index of the page.</param>
            <returns>Returns HTML markup for given pageIndex.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.GetDocumentOutline(System.String)">
            <summary>
            Gets the document outlines' tree.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <returns>The tree of document outline entries.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.SearchText(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches the text.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <param name="query">The search query.</param>
            <param name="caseSensitive">if set to <c>true</c> search will be case sensitive.</param>
            <param name="useRegExp">if set to <c>true</c> query text will be recognized as a regular expression.</param>
            <returns>The Search Results.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.GetPageImage(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the page image.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <param name="dpi">The dpi.</param>
            <param name="zoom">The zoom.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="printTarget">Indicates that the pages are requested for printing.</param>
            <returns>Raw image data.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.Export(System.String,System.String)">
            <summary>
            Export the document specified by documentKey to the specified format.
            </summary>
            <param name="documentKey">The document key.</param>
            <param name="format">The format.</param>
            <returns>Document data.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.ExportToFile(System.String,System.String)">
            <summary>
            Export the document specified by documentKey to the specified format and returns url that can be used to download file.
            </summary>
            <param name="documentKey">The document key.</param>
            <param name="format">The format.</param>
            <returns>Url to exported file.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.HasCachedDocument(System.String,System.String)">
            <summary>
            Checks whether a previously cached report or document is available.
            </summary>
            <param name="fileName">Report or document file name.</param>
            <param name="reportName">Report name.</param>
            <returns><c>true</c> if a cached report or document is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.HasCachedDocument(System.String,System.String,C1.Web.UI.Controls.C1Report.ReportParameterValue[])">
            <summary>
            Checks whether a previously cached report or document is available.
            </summary>
            <param name="fileName">Report or document file name.</param>
            <param name="reportName">Report name.</param>
            <param name="paramValues">Report parameters or null.</param>
            <returns><c>true</c> if a cached report or document is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.IC1WebReportService.OnDocumentChanged(System.Object)">
            <summary>
            Tells the service that the document has changed.
            </summary>
            <param name="newDocument">The new document value.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.#ctor(System.Object,C1.Web.UI.Controls.C1Report.ReportService.ReportCache,C1.Web.UI.Controls.C1Report.ViewType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="cache">The cache.</param>
            <param name="viewType">Type of the view.</param>
            <param name="workDir">Work directory (must have write access).</param>
            <param name="workUrl">Work directory URL (forward slash-terminated).</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.MakeHelper(System.String)">
            <summary>
            Makes the C1WebReportServiceHelper instance.
            </summary>
            <param name="documentKey">The document key.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.GetDocumentStatus(System.String,System.String,C1.Web.UI.Controls.C1Report.ReportParameterValue[],System.String)">
            <summary>
            Retrieves a document's or report's status by file/report/parameters.
            </summary>
            <param name="fileName">Document or report file name.</param>
            <param name="reportName">Report name.</param>
            <param name="paramValues">Report parameter values.</param>
            <param name="cookie">Arbitrary string that was passed back from the service in DocumentStatus
            in the previous GetDocumentStatus call, or null if there was no previous call.</param>
            <returns>
            A <see cref="T:C1.Web.UI.Controls.C1Report.DocumentStatus"/> instance containing information about the requested document.
            </returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.GetDocumentStatus(System.String,System.String)">
            <summary>
            Retrieves a document's or report's status.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <param name="cookie">Cookie data that generated by C1Report service on previous GetDocumentStatus call.
            Pass null if previous cookie value is unknown.</param>
            <returns>
            A <see cref="T:C1.Web.UI.Controls.C1Report.DocumentStatus"/> instance containing information about the requested document.
            </returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.GetDocumentKey(System.String,System.String,C1.Web.UI.Controls.C1Report.ReportParameterValue[])">
            <summary>
            Gets a key that can be used to access a cached document.
            </summary>
            <param name="fileName"></param>
            <param name="reportName"></param>
            <param name="paramValues"></param>
            <returns>The document key.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.GetPageImagesMarkup(System.String,System.Int32,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Gets the document/report page images markup.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <param name="dpi">Client screen resolution.</param>
            <param name="zoom">Zoom, in percent (100 is actual size).</param>
            <param name="pageIndices">The page indices that must be loaded.</param>
            <param name="getImagesOnly">If true, this method will generate page images only without information about document text.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.GetUnpagedHtmlMarkup(System.String)">
            <summary>
            Gets the HTML report markup.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.GetPageHtmlMarkup(System.String,System.Int32)">
            <summary>
            Gets the page HTML markup.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <param name="pageIndex">Index of the page.</param>
            <returns>Returns HTML markup for given pageIndex.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.GetDocumentOutline(System.String)">
            <summary>
            Gets the document outlines' tree.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <returns>The tree of document outline entries.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.SearchText(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Searches the text.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <param name="query">The search query.</param>
            <param name="caseSensitive">if set to <c>true</c> search will be case sensitive.</param>
            <param name="useRegExp">if set to <c>true</c> query text will be recognized as a regular expression.</param>
            <returns>The Search Results.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.GetPageImage(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the page image.
            </summary>
            <param name="documentKey">Cached document key.</param>
            <param name="dpi">The dpi.</param>
            <param name="zoom">The zoom.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="printTarget">Indicates that the pages are requested for printing.</param>
            <returns>Raw image data.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.Export(System.String,System.String)">
            <summary>
            Export the document specified by documentKey to the specified format.
            </summary>
            <param name="documentKey">The document key.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.ExportToFile(System.String,System.String)">
            <summary>
            Export the document specified by documentKey to the specified format and returns url that can be used to download file.
            </summary>
            <param name="documentKey">The document key.</param>
            <param name="format">The format.</param>
            <returns>Url to exported file.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.HasCachedDocument(System.String,System.String)">
            <summary>
            Checks whether a previously cached report or document is available.
            </summary>
            <param name="fileName">Report or document file name.</param>
            <param name="reportName">Report name.</param>
            <returns><c>true</c> if a cached report or document is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.HasCachedDocument(System.String,System.String,C1.Web.UI.Controls.C1Report.ReportParameterValue[])">
            <summary>
            Checks whether a previously cached report or document is available.
            </summary>
            <param name="fileName">Report or document file name.</param>
            <param name="reportName">Report name.</param>
            <param name="paramValues">Report parameters or null.</param>
            <returns><c>true</c> if a cached report or document is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.C1WebReportServiceHelper.OnDocumentChanged(System.Object)">
            <summary>
            Tells the service that the document has changed.
            </summary>
            <param name="newDocument">The new document value.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument">
            <summary>
            Represents a cached document. Note that document pages are stored on disk in a zip file.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedWorkFile">
            <summary>
            Represents a cached item associated with a temporary/work file.
            When the item is removed from cache, the associated file is deleted.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.InsertDocument(C1.Web.UI.Controls.C1Report.ReportService.ServiceCache,System.Web.HttpContext,C1.Web.UI.Controls.C1Report.ReportService.DocIdentity,C1.Web.UI.Controls.C1Report.ReportService.C1DocHolder,C1.Web.UI.Controls.C1Report.ReportService.DocumentType,System.String)">
            <summary>
            Logically, this is the constructor - the only place where a new instance of CachedDocument
            is created.
            
            This method is called from within a static lock (typeof(CachedDocument)).
            
            Inserts a documment into the cache.
            Adding pages is handled in 2 different ways depending on whether the Pages array
            is currently empty or not. If it is not empty, the document is considered to be
            generated, pages are added and never checked for updates.
            If currently there are no pages, document's page added/changed events are subscribed to,
            and pages are only added on those events.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.GetCachedDocument(System.String)">
            <summary>
            Gets a previously cached document.
            NOTE: unlike the other overload, this method does NOT create a cached document
            if it is not found, so it may return null.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.GetCachedDocument(C1.Web.UI.Controls.C1Report.ReportService.ServiceCache,C1.Web.UI.Controls.C1Report.ReportService.DocIdentity,System.String@)">
            <summary>
            Gets a cached document. If the document could not be found in the cache,
            it is created and inserted into the cache.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.IncreaseCurrentPageCount">
            <summary>
            Called by GeneratingDocument_PageAdded.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.SetPercentComplete(System.Int32)">
            <summary>
            Called by GeneratingDocument_LongOperation and some other methods.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.GetPageImage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a single page image. If the page is unavailable, returns null.
            It is the caller's responsibility to retry the call if null is not good.
            </summary>
            <param name="dpi">Target page image resolution.</param>
            <param name="pageIndex">Page index.</param>
            <param name="printTarget">If true, image is cropped to page margins.</param>
            <returns>Image data or null.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.TryAddOrGetCachedPageImage(C1.Web.UI.Controls.C1Report.ReportService.CachedPageData,System.String,System.Double,System.Int32)">
            <summary>
            Makes the page bitmap and tries to save it as an image (.png) file on disk.
            In case of failure a number of retries are attempted, and if after a failure
            the CachedPageImage was added to cache by another thread, that one is returned.
            NULL is returned in case of fatal error.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.LoadDocument(System.Object,C1.Web.UI.Controls.C1Report.ReportService.DocIdentity,System.Object@,C1.Web.UI.Controls.C1Report.ReportService.DocumentType@,C1.Web.UI.Controls.C1Report.ReportService.C1DocHolder@,System.String@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.String@)">
            <summary>
            Loads document or report from file but DOES NOT generate it.
            Upon return, rep or doc have the report/document to be generated.
            The return value indicates whether it needs to be generated.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.AddCachedPagesToZip(System.Object)">
            <summary>
            Thread top method.
            
            Adds pages to a zip in a separate thread. After each page is added,
            the file becomes available for reading by other threads.
            This method is used when the viewer starts with a generated document,
            and all pages are already available.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.AddCachedPagesToZip(C1.Web.UI.Controls.C1Report.ReportService.CachedDocumentInfo)">
            <summary>
            Adds pages to a zip in a separate thread. After each page is added,
            the file becomes available for reading by other threads.
            This method is used when the viewer starts with a generated document,
            and all pages are already available.
            </summary>
            <param name="param">The param.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.GetPagesFromZip(System.Collections.Generic.List{System.Int32},System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets a set of pages from zip file in a thread-safe way.
            Note that the resulting list may contain less pages than what was requested via pageIndices.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.SyncRoot">
            <summary>
            Lock this to access the document.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageZipPath">
            <summary>
            Gets the zip file path.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.Key">
            <summary>
            Gets the key for the current cached document in server cache.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.FileName">
            <summary>
            Gets the report or document file name.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.ReportName">
            <summary>
            Gets the report name. For in-memory documents, this should be set
            to different values for different documents by the developer.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.Outline">
            <summary>
            Gets or sets the document outline.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.Dpi">
            <summary>
            Gets the resolution used by various pixel sizes and coordinates.
            The value is constant 96.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.CreationTime">
            <summary>
            Gets the document's creation time.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.DefaultPageSize">
            <summary>
            Gets the default page size for the document.
            Normally this should not be used - use individual page sizes from PageInfos instead.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.WorkDir">
            <summary>
            Gets the working directory used by the current cached document.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.WorkUrl">
            <summary>
            Gets the forward slash-terminated URL pointing to the working directory.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.ViewType">
            <summary>
            Gets the current document's view type (currently, page images only).
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.CurrentPageCount">
            <summary>
            Gets the current page count.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PercentComplete">
            <summary>
            Gets the approximate completion ratio for the document if it is currently generating,
            from 0 to 100. Gets 100 for generated documents.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfos">
            <summary>
            Gets the list of <see cref="T:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo"/> describing document pages.
            NOTE: indices in this list correspond to 0-based page indices in the document,
            BUT the list may contain NULL elements - not generated yet.
            (A C1PrintDocument may generate pages non-sequentially.)
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo">
            <summary>
            Represents some page data stored in memory (in the server cache).
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo.#ctor(System.Int32,System.Int32,C1.C1Preview.SizeD,C1.C1Preview.OffsetsD)">
            <summary>
            Initializes a new instance of PageInfo.
            </summary>
            <param name="posX">Horizontal (right) page position in the document (0-based).</param>
            <param name="posY">Vertical (down) page position in the document (0-based).</param>
            <param name="size">Page size in pixels (DPI is determined by owner).</param>
            <param name="margins">Page margins in pixels (DPI is determined by owner).</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo.IncrementGeneration">
            <summary>
            Increments generation by 1.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo.PosX">
            <summary>
            Gets the horizontal logical page position in the document (0-based).
            Usually this value is 0.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo.PosY">
            <summary>
            Gets the vertical logical page position in the document (0-based).
            Usually this value is same as page index.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo.Size">
            <summary>
            Page size in pixels at owner's Dpi.
            This is updated in PageAdded, i.e. is actual even if PageGeneration==-1;
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo.Margins">
            <summary>
            Page margins in pixels at owner's Dpi.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo.Generation">
            <summary>
            Generation of the corresponding cached page.
            Pages are cached AFTER this is updated, so cached pages are guaranteed
            not to be older than this.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageInfo.Id">
            <summary>
            Gets a value that uniquely identifies the current page within the document.
            Ids are ordered but not sequential.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageGenRun">
            <summary>
            Represents a sequence of pages with the same generation number.
            Used to calculate the list of changed pages for the client.
            NOTE: methods in this class should be called with CachedDocument LOCKED!
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.PageGenRun.BuildRuns(C1.Web.UI.Controls.C1Report.ReportService.CachedDocument)">
            <summary>
            Builds the list of PageGenRun's for the current document's state.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedDocument.CacheC1dParams">
            <summary>
            Used to pass parameters to CacheGeneratedDoc which is called to cache C1D/X
            when the document was initially already generated.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedDocumentInfo">
            <summary>
            Used to pass info about a cached document around.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedGeneratingDocument">
            <summary>
            Used to keep info about a currently generating document in cache.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedGeneratingDocument.#ctor(System.String,C1.Web.UI.Controls.C1Report.ReportService.C1DocHolder)">
            <summary>
            Initializes a new instance of CachedGeneratingDocument.
            </summary>
            <param name="cachedDocumentKey">Key for the associated CachedDocument (must be already in cache).</param>
            <param name="docHolder">The doc holder.</param>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedGeneratingDocument.DocumentKey">
            <summary>
            Gets the associated CachedDocument key.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedGeneratingDocument.DocHolder">
            <summary>
            Gets the C1PrintDocument (standalone or c1report's internal),
            or the C1MultiDocument.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedPageImage">
            <summary>
            Used to cache a path to a page image file and its pixel dimension.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedC1d">
            <summary>
            Used to cache a path to a saved c1d(m)(x).
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedC1d.Lock">
            <summary>
            This MUST be used when deleting the file!
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedC1DocHolder">
            <summary>
            Used to cache a C1PrintDocument or a C1MultiDocument in memory for search/export.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedC1DocHolder.SyncRoot">
            <summary>
            Use this to use C1Doc.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.CachedPageData">
            <summary>
            Represents page data serialized as a separate entry into the page zip file.
            Contains the graphic page representation (<see cref="P:C1.Web.UI.Controls.C1Report.ReportService.CachedPageData.MetafileData"/>),
            text and hyperlinks markup, and other info.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.CachedPageData.Make(C1.Web.UI.Controls.C1Report.ReportService.CachedDocument,C1.Web.UI.Controls.C1Report.ReportService.C1DocHolder,System.Int32,System.Web.HttpContext)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedPageData.PageIndex">
            <summary>
            0-based page index.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedPageData.Size">
            <summary>
            Page size in pixels (using CachedDocument.Dpi).
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedPageData.MetafileData">
            <summary>
            Metafile data as serialized via GraphicsUtils.WriteMetafileToMemory.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedPageData.TextRunInfos">
            <summary>
            TextRunInfos (using CachedDocument.Dpi).
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedPageData.Hyperlinks">
            <summary>
            The list of HyperlinkEntry for this page (using CachedDocument.Dpi).
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.CachedPageData.Generation">
            <summary>
            Page generation (version). This starts at 0 when the page is first created,
            and increments by 1 each time the page is changed.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.StartGenerateDocument(C1.Web.UI.Controls.C1Report.ReportService.ServiceCache,C1.Web.UI.Controls.C1Report.ReportService.CachedDocumentInfo,System.Object,C1.Web.UI.Controls.C1Report.ReportService.C1DocHolder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a CachedGeneratingDocument in cache, and spawns a separate thread
            to generate the document. Note that CachedDocument must be already created
            and added to cache when this method is called.
            </summary>
            <param name="scache">The service cache.</param>
            <param name="cdocInfo">Cached document info.</param>
            <param name="report">C1Report, C1RdlReport, C1PrintDocument or C1MultiDocument to generate, or null.</param>
            <param name="docHolder">The underlying C1PrintDocument or C1MultiDocument.</param>
            <param name="c1reportParamValues">C1Report parameters.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.AddGeneratedPagesToZipThread(System.Object)">
            <summary>
            Top thread method adding generated pages of a document to the zip cache.
            </summary>
            <param name="o">GeneratingDocInfo.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GenerateDocumentThread(System.Object)">
            <summary>
            Top thread method generating the document/report.
            </summary>
            <param name="o">GenerateDocumentParams.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.OnPageAdded(C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GeneratingDocInfo,C1.C1Preview.C1Page,System.Int32)">
            <summary>
            Adds (or inserts) a generated page.
            </summary>
            <param name="genDocInfo">Generating document info.</param>
            <param name="c1page">The added page.</param>
            <param name="pageIndex">Page index in the *whole* document (may differ from page.Index in a C1MultiDocument).</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GeneratingDocInfo">
            <summary>
            Used to pass data to event handlers of the document being generated.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GeneratingDocInfo.#ctor(C1.Web.UI.Controls.C1Report.ReportService.CachedDocumentInfo,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="cdocInfo">Cached document info.</param>
            <param name="generatingDocumentKey">Generating document key.</param>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GeneratingDocInfo.CachedDocInfo">
            <summary>
            Gets info about the cached document.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GeneratingDocInfo.GeneratingDocumentKey">
            <summary>
            Gets the CachedGeneratingDocument key.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GeneratingDocInfo.ToZipQueue">
            <summary>
            This is the queue of cache-ready pages waiting to be put into the page zip.
            The queue is created by the C1PrintDocument page (added, changed) and end
            event handlers. Pages are drawn in the same thread as the document is generated,
            and then put into this queue to be saved to the page zip. Because page zip
            saving may be slow, using a separate thread for that should speed things up
            as document generation won't have to wait for zip updates.
            
            NULL element closes the queue and exits page zip updating thread.
            
            Use lock(ToZipQueue) to access the queue.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GeneratingDocInfo.ToZipQueueWaitHandle">
            <summary>
            Used by the page zip updating thread to wait for new pages to be added to the queue.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GenerateDocumentParams">
            <summary>
            Holds parameters passed to the document generating thread.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GenerateDocumentParams.#ctor(System.Object,C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GeneratingDocInfo,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Ctor.
            </summary>
            <param name="report">C1Report, C1RdlReport, C1PrintDocument or C1MultiDocument.</param>
            <param name="genDocInfo">Generating document info</param>
            <param name="sos">C1Report parameters (may be null).</param>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GenerateDocumentParams.Report">
            <summary>
            Report or document being generated:
            C1Report, C1RdlReport, C1PrintDocument or C1MultiDocument.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GenerateDocumentParams.GenDocInfo">
            <summary>
            Generating document info (used by document/report event handlers).
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.GenerateDoc.GenerateDocumentParams.C1ReportScriptObjects">
            <summary>
            C1Report parameters.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.GeneratingState">
            <summary>
            Enumerates possible report states.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.GeneratingState.Ready">
            <summary>
            Report is completely generated.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.GeneratingState.GeneratingPages">
            <summary>
            Report is currently generating, total page count may change.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.GeneratingState.UpdatingPages">
            <summary>
            Report is still generating, individual pages may change but total page count is final.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.GeneratingState.ParametersRequested">
            <summary>
            Report needs parameters, status contains ParamInfos describing the requested parameters.
            All other fields in status are not initialized.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ViewType">
            <summary>
            Enumerates possible report view types.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ViewType.PageImages">
            <summary>
            Paged Images.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ViewType.UnpagedHtml">
            <summary>
            Unpaged Html.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.PrintRangeSubset">
            <summary>
            Print Range Subset.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PrintRangeSubset.All">
            <summary>
            All pages.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PrintRangeSubset.Odd">
            <summary>
            Odd pages only.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PrintRangeSubset.Even">
            <summary>
            Even pages only.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.DocumentStatus">
            <summary>
            CommonReport Information.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.documentKey">
            <summary>
            Unique key identifying a cached document.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.exportFormats">
            <summary>
            Export formats available for current document.
            The list is a sequence of pairs: export format description/default extension for that format.
            <para>The description should uniquely identify the format within the list.</para>
            <para>The extension must be lowercase and should not include the dot (e.g. "pdf").</para>
            <para>This member contains data only when the document is not generating (<see cref="F:C1.Web.UI.Controls.C1Report.DocumentStatus.isGenerating"/> is <c>false</c>).</para>
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.isGenerating">
            <summary>
            Indicates whether current report is generating and report information is not available.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.state">
            <summary>
            The current report generating state (ready, pages are being added, or pages are being updated).
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.percentComplete">
            <summary>
            If report is generating, gets the approximate percent of work complete, from 0 to 100.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.name">
            <summary>
            Report name
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.created">
            <summary>
            Date created.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.pageCount">
            <summary>
            Total page count.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.type">
            <summary>
            View type (page images or HTML).
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.w">
            <summary>
            Default page width in pixels for Zoom 100% and 96 DPI.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.h">
            <summary>
            Default page width in pixels for Zoom 100% and 96 DPI.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.changedPages">
            <summary>
            Indices of pages that changed since the last GetDocumentStatus call
            (calls are tracked via the cookie field).
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.pageSizes">
            <summary>
            Array of intervals of pages with the same size.
            The intervals are guaranteed to be sorted by page indices,
            and to cover all pages from 0 to pageCount.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.cookie">
            <summary>
            Cookie data that generated by C1Report service.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.error">
            <summary>
            If an error occurred on the server, contains the error description.
            Normally should be null.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentStatus.reportParams">
            <summary>
            The array of REQUIRED report parameters, filled in by the server.
            
            May be null, BUT IF this is non-null on return from server,
            the client must use this info to fill the param name/param value list,
            and pass it to the server in order to generate the document.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportParameterInfo">
            <summary>
            Info that is used to build a UI needed to input a report parameter.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterInfo.n">
            <summary>
            Parameter name. This is used as the key identifying the parameter value.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterInfo.p">
            <summary>
            Parameter UI prompt.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterInfo.vs">
            <summary>
            The initial parameter value or values.
            An example of multiple values parameter: select days of week,
            UI should show a list of Mon/Tue/..., with a checkbox near each day,
            and some days selected initially - those would be ones specified here.
            May be null.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterInfo.t">
            <summary>
            Parameter type name.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterInfo.pvs">
            <summary>
            The list of possible values. Should be used to populate dropdowns,
            radiobuttons and the like. This may be null.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterInfo.vx">
            <summary>
            Flag indicating whether the list of possible values is exclusive
            (i.e. input must be limited to those values only).
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterInfo.rq">
            <summary>
            Flag indicating whether the parameter is required
            (must be filled in by user).
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterInfo.nu">
            <summary>
            Flag indicating whether the parameter may be null.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterInfo.mv">
            <summary>
            Flag indicating whether the parameter can accept multiple values.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportParameterSingleValue">
            <summary>
            Represents a single value of a parameter, together with that value's label.
            The label may be used to represent the parameter in the UI.
            E.g. for weekdays, integer values (0..6) may be used, with
            corresponding labels "Mon".."Sun".
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterSingleValue.v">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterSingleValue.l">
            <summary>
            Parameter label. This may be null,
            in which case v.ToString() should be used as the label.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportParameterValue">
            <summary>
            Parameter and its value passed from client to server.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterValue.n">
            <summary>
            Parameter name. Corresponds to ReportParameterInfo.n.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportParameterValue.vs">
            <summary>
            The parameter value or values.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.PageImagesMarkup">
            <summary>
            PageImagesMarkup data class.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImagesMarkup.isGenerating">
            <summary>
            Indicates whether current report is generating and report information is not available.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImagesMarkup.documentKey">
            <summary>
            Unique key identifying a cached document.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImagesMarkup.pages">
            <summary>
            Array of PageImage Markups.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImagesMarkup.zoom">
            <summary>
            Zoom factor for which the markup was generated.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImagesMarkup.error">
            <summary>
            Error description.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.PageImageMarkup">
            <summary>
            PageImageMarkup data class.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImageMarkup.idx">
            <summary>
            Index of the page in the document (0-based).
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImageMarkup.w">
            <summary>
            Page width (pixels).
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImageMarkup.h">
            <summary>
            Page height (pixels).
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImageMarkup.texts">
            <summary>
            Array of page text run descriptors.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageImageMarkup.links">
            <summary>
            Array of Hyperlinks that located on this page. Can be null if page does not contains hyperlinks.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.TextRunMarkup">
            <summary>
            Describes a text run (a single line of text sharing the same formatting).
            A text run may contain zero or more words (semantics of words are defined
            by the server; in particular, words may be single chars).
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.TextRunMarkup.x">
            <summary>
            The X coordinate of the text run relative to the left edge of the page, in pixels.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.TextRunMarkup.y">
            <summary>
            The Y coordinate of the text run relative to the top edge of the page, in pixels.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.TextRunMarkup.w">
            <summary>
            The width of the text run, in pixels.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.TextRunMarkup.h">
            <summary>
            The height of the text run, in pixels.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.TextRunMarkup.p">
            <summary>
            Array containing X coordinates of words' first chars, relative to
            the left bound of the text run. May be null or have 0 elements.
            If the first element is present, it would normally contain 0
            i.e. the X coordinate of the first char of the first word in the text run.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.TextRunMarkup.ix">
            <summary>
            Array containing 0-based indices of words' first chars into the "text" string.
            If the "p" array is null or empty, this array must also be null or empty.
            If the "p" array is not empty, and this array has exactly one element "-1",
            the "p" array is assumed to contain coordinates of all individual chars in "text".
            In all other cases, this array must have the same number of elements as the "p" array,
            and must contain indices into "text" string of subsequent words' first chars.
            In that case the first element of this array must contain "0" (index of the first char
            of the first word in the text run). The length of a word is determined by
            the starting indices of that and next word.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.TextRunMarkup.text">
            <summary>
            The text of the text run. May not contain line breaks.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.OutlineEntry">
            <summary>
            OutlineEntry data class.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.OutlineEntry.text">
            <summary>
            Text for the outline entry.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.OutlineEntry.p">
            <summary>
            0-based index of page associated with this outline entry.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.OutlineEntry.tr">
            <summary>
            Array of page text run descriptors that contains coordinates 
            of the text to be focused. Can not be null.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.OutlineEntry.oes">
            <summary>
            Array of child outline entries. May be null for leaf nodes.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.DocumentOutline">
            <summary>
            DocumentOutline data class.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentOutline.documentKey">
            <summary>
            Unique key identifying a cached document.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentOutline.isGenerating">
            <summary>
            Indicates whether current report is generating and report information is not available.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentOutline.oes">
            <summary>
            Array of top-level outline entries associated with the document.
            May be null if there are no outlines in the document.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.DocumentOutline.error">
            <summary>
            Error description.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.SearchResults">
            <summary>
            Search Results.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.SearchResults.documentKey">
            <summary>
            Unique key identifying a cached document.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.SearchResults.isGenerating">
            <summary>
            Indicates whether current report is generating and report information is not available.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.SearchResults.query">
            <summary>
            Query text that was used for search.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.SearchResults.count">
            <summary>
            Search matches count. 0 if nothing found, otherwise this values equals ses array length.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.SearchResults.ses">
            <summary>
            Array of search entries.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.SearchResults.error">
            <summary>
            Error description.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.HyperlinkEntry">
            <summary>
            Describes a hyperlink on a page of a document.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.HyperlinkEntry.text">
            <summary>
            The hyperlink text. This is usually displayed in the browser's status when
            the mouse is over this hyperlink.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.HyperlinkEntry.p">
            <summary>
            0-based index of the page containing this hyperlink.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.HyperlinkEntry.tr">
            <summary>
            Array of page text run descriptors that contains coordinates 
            of the text. Can not be null.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.HyperlinkEntry.a">
            <summary>
            Action that will be executed when hyperlink is cliked by user, can be null.
            Action examples:
            "http://google.com'", url to external page that will be opened in current window (user can use ctrl+click in order to open hyperlink in the new window)
            "javascript:some_javascript code", e.g. "javascript:alert('hellow world')"        
            "exec:somemethod(parame, parame2)", executes C1ReportViewer method, e.g. "exec:exportToFile('Adobe PDF','pdf')"
            "moveto:p,i", where p - page index, i - index of the TextRunMarkup within tr array of the page given by index p , report view will be scrolled to given place", e.g. "javascript:alert('moveto:5,10')"
            todo: add moveTo method for the C1ReportViewer client side object and use it along with exec action
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.SearchEntry">
            <summary>
            Search Entry. This class is used by search tool.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.SearchEntry.text">
            <summary>
            Text that was found.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.SearchEntry.p">
            <summary>
            Page index where text is located.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.SearchEntry.tr">
            <summary>
            Array of page text run descriptors that contains coordinates 
            of the text. Can not be null.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.PageRangeSizeInfo">
            <summary>
            PageSetSize.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageRangeSizeInfo.s">
            <summary>
            Start page index. This index will be included into current set.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageRangeSizeInfo.e">
            <summary>
            End page index. This index will be included into current set.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageRangeSizeInfo.w">
            <summary>
            Page width in pixels for Zoom 100% and 96 DPI.
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.PageRangeSizeInfo.h">
            <summary>
            Page height in pixels for Zoom 100% and 96 DPI.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker">
            <summary>
            Used to make cache keys, file names and such.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.SessionID(System.Web.HttpContext)">
            <summary>
            Gets current session id.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.PageZipPath(System.String,System.String)">
            <summary>
            Makes full path for the pages cache zip file.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.PageZipEntry(System.Int32)">
            <summary>
            Makes name of an entry in the pages cache zip file.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.PageImageFileName(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Makes file name (without path) for page image (.png).
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.C1dFileName(System.String,System.String)">
            <summary>
            Makes c1d(m)(x) file name (without path) for a generated document.
            Ext must have dot (.c1d, .c1dx or .c1mdx).
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.PageThumbnailFileNameFormat(System.String,System.String)">
            <summary>
            Makes file name FORMAT (expected to be used with page index) (without path) for page thumbnails.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.FilePath(System.String,System.String)">
            <summary>
            Makes full path name for a work file.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.FileUrl(System.String,System.String)">
            <summary>
            Makes URL for a work file.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.UnpagedHtmlFileName(System.String,System.String)">
            <summary>
            Makes file name (without path) for unpaged html.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.CachedDocumentKey(C1.Web.UI.Controls.C1Report.ReportService.DocIdentity,System.Boolean,System.Web.HttpContext)">
            <summary>
            Makes the cached document key.
            Pass empty string in sessionId to share document between sessions.
            Keys are unique for different pairs of file and report names, and optionally session IDs.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.GeneratingDocumentKey(System.String)">
            <summary>
            Makes the cache key for the generating document.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.CachedDocumentPageKey(System.String,System.Int32,System.Int32)">
            <summary>
            Cache entry that expires when a page's generation changes, used to remove stale page images.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.CachedC1DocKey(System.String)">
            <summary>
            Cached C1PrintDocument in memory (for search/export).
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.ThreadedErrorsKey(System.String)">
            <summary>
            Makes the cache key for the cached errors collection.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.KeyMaker.PageRequestsQueueKey(System.String)">
            <summary>
            Makes the cache key for the page requests queue.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.C1DocHolder">
            <summary>
            Holds either a C1PrintDocument or a C1MultiDocument reference.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.DocIdentity">
            <summary>
            Represents the set of properties that uniquely identify a generated and cached
            report or document. Changing any of FileName/ReportName/Parameters would
            normally result in a new document being generated on the server.
            The presence of ParamInfos here is patchy - those are NOT used to id a document.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.DocIdentity.FileName">
            <summary>
            Gets the report file name.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.DocIdentity.ReportName">
            <summary>
            Gets the report name.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.DocIdentity.Parameters">
            <summary>
            Gets parameter values for the report.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.DocIdentity.ParamInfos">
            <summary>
            Gets or sets the list of parameter infos that may be used to build UI for parameter input.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.ThreadedErrors">
            <summary>
            Used to pass error information from generating, zipping or other
            threads to the UI thread.
            Use the static thread-safe methods to add and retrieve errors.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.ThreadedErrors.PopAllErrors(System.Web.HttpContext,System.String)">
            <summary>
            Pops all current errors.
            If there are no errors, this method returns null.
            </summary>
            <param name="context"></param>
            <param name="documentKey"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.ThreadedErrors.PopErrors(System.String)">
            <summary>
            Pops all errors into a single string, using the current context.
            </summary>
            <param name="documentKey"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.PageRequestQueue">
            <summary>
            FIFO queue for page requests.
            Page requests are pushed onto the queue by client requests processing thread(s).
            Page requests are popped from the queue by the generating thread - when a page
            is popped it is added to the page zip.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.PageRequestQueue.AddingCachedPage(System.Web.HttpContext,System.String,System.Int32,System.Int32)">
            <summary>
            Should be called prior to addding a page to the cache.
            Return value indicates whether the page needs to be added.
            </summary>
            <param name="context">The context.</param>
            <param name="documentKey">The document key.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="generation">The generation.</param>
            <returns></returns>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.ReaderWriterLockSlim">
            <summary>
            This is lifted from .NET 3.5.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionPolicy">
            <summary>
            LockRecursionPolicy
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionPolicy.NoRecursion">
            <summary>
            
            </summary>
        </member>
        <member name="F:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionPolicy.SupportsRecursion">
            <summary>
            
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionException">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionException"/> class.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.ReportService.LockRecursionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.ReportCache">
            <summary>
            Reports cache implementation (controlled by web report's Cache property or by service).
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.ReportCache.Enabled">
            <summary>
            Specifies whether the control should store rendered reports in the cache.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
            <remarks>
            	<para>This property is set to true by default, allowing the <see cref="T:C1.Web.UI.Controls.C1Report.C1ReportViewer"/> to use
            the <see cref="P:System.Web.UI.Page.Cache"/> object to store frequently used reports. This enhances
            performance significantly, but it does use some server resources.</para>
            	<para>If you want to reduce the memory requirements on the server, setting the
            <see cref="P:C1.Web.UI.Controls.C1Report.ReportService.ReportCache.Enabled"/> property to false will cause the <see cref="T:C1.Web.UI.Controls.C1Report.C1ReportViewer"/> control
            not to use the cache. Reports will be rendered every time they are requested, and memory
            usage will be reduced at the expense of more data access and processing time needed to
            create the reports multiple times.</para>
            	<para>In general, you should only turn the cache off if you are rendering a custom report
            that probably won't be requested again in the next few hours.</para>
            </remarks>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.ReportCache.Expiration">
            <summary>
            Gets or sets the number of minutes that elapse before reports are discarded from the cache.
            </summary>
            <remarks>
            <para>The default value for this property is 30, causing reports to be stored in the cache for 
            30 minutes before they are discarded. You can use the <see cref="P:C1.Web.UI.Controls.C1Report.ReportService.ReportCache.Sliding"/> property to 
            determine whether this is an absolute or a "sliding" limit (meaning the interval is reset 
            every time the report in the cache is reused).</para>
            <para>The amount of time reports remain in the cache is also affected by file dependencies.
            By default, changes in the report definition file cause cached reports to be discarded.</para>
            </remarks>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.ReportCache.Priority">
            <summary>
            Gets or sets the cost of reports relative to other objects in the cache.
            </summary>
            <remarks>
            <para>If your application stores many types of object in the cache, you may want to set 
            the <see cref="P:C1.Web.UI.Controls.C1Report.ReportService.ReportCache.Priority"/> property to reflect the relative cost of each type of item. 
            For example, you may be generating technical diagrams that take a long time to create, 
            and should have a higher cache priority than simple reports. Or you may be caching 
            customer information that is easy to retrieve from the database and should have a 
            lower priority.</para>
            <para>For more details on this property, and a list of valid settings, see the 
            <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)"/> method in the .NET framework documentation.</para>
            </remarks>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.ReportCache.ShareBetweenSessions">
            <summary>
            Gets or sets a value indicating whether cached reports and documents are shared between different sessions.
            The default value is true, which means that different browser sessions will be able to access the same cached report or document.
            Set to false to prevent such sharing.
            </summary>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.ReportService.ReportCache.Sliding">
            <summary>
            Specifies whether the expiration timer should be reset when reports are retrieved from the cache.
            </summary>
            <remarks>
            The default value for this property is true, meaning that the expiration time is resets
            when reports are retrieved from the cache.
            </remarks>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.ReportService.ServiceCache">
            <summary>
            Implements server caching logic for report control or service.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.ServiceCache.#ctor(System.Object,C1.Web.UI.Controls.C1Report.ReportService.ReportCache,System.String,System.String)">
            <summary>
            Initializes a new instance of the service cache class.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.ServiceCache.OnDocumentChanged(System.Object)">
            <summary>
            This method should be called by the client when the in-memory document has changed.
            </summary>
            <param name="document">The new document value.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.TextSearchUtil.FindTextInstances(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds instances of text in a string.
            </summary>
            <param name="what">The text to search for.</param>
            <param name="where">The string to search.</param>
            <param name="fromIdx">Index in "where" to start search at.</param>
            <param name="length">Length of substring to search in.</param>
            <param name="maxCount">Max number of instances to find.</param>
            <param name="forward">Search direction.</param>
            <param name="matchCase">Ignore case.</param>
            <param name="word">Whole word search.</param>
            <returns>Array of indexes into "where" to the found instances.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.ThreadStarter.Start(System.Object)">
            <summary>
            Start ALL THREADS via this!!!
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.ReportService.Util.FillOutlineEntryChildren(C1.Web.UI.Controls.C1Report.ReportService.C1DocHolder,C1.C1Preview.OutlineNodeCollection,C1.Web.UI.Controls.C1Report.OutlineEntry[])">
            <summary>
            Fills a collection of OutlineEntry.
            </summary>
            <param name="nodes">Source outline nodes.</param>
            <param name="entries">Target outline entry array. Must be initialized to the same
            number of empty elements as <paramref name="nodes"/>.</param>
            <param name="docHolder">Document holder (C1PrintDocument or C1MultiDocument).</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.UI.C1ReportPane">
            <summary>
            UI control that used to display report content.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ReportPane.#ctor(C1.Web.UI.Controls.C1Report.C1ReportViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.UI.C1ReportPane"/> class.
            </summary>
            <param name="reportViewer">The report viewer.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ReportPane.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.UI.C1ReportPaneTemplate">
            <summary>
            C1ReportPane Template to use with template properties.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ReportPaneTemplate.#ctor(C1.Web.UI.Controls.C1Report.C1ReportViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.UI.C1ReportPaneTemplate"/> class.
            </summary>
            <param name="reportViewer">The report viewer.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ReportPaneTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            Defines the System.Web.UI.Control object that
            child controls and templates belong to. These child controls are in turn
            defined within an inline template.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.UI.C1ToolBarLabelTemplate">
            <summary>
            ToolBar Label Template to use with C1ToolBarItem's ItemTemplate property.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ToolBarLabelTemplate.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.UI.C1ToolsPaneTemplate"/> class.
            </summary>
            <param name="htmlContent">Content of the HTML.</param>
            <param name="labelClass">The label class.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ToolBarLabelTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            Defines the System.Web.UI.Control object that
            child controls and templates belong to. These child controls are in turn
            defined within an inline template.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.UI.C1ToolsPane">
            <summary>
            C1Report Tools Pane.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ToolsPane.#ctor(C1.Web.UI.Controls.C1Report.C1ReportViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.UI.C1ToolsPane"/> class.
            </summary>
            <param name="reportViewer">The report viewer.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ToolsPane.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ToolsPane.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.UI.C1ToolsPaneTemplate">
            <summary>
            Tools Pane Template to use with template properties.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ToolsPaneTemplate.#ctor(C1.Web.UI.Controls.C1Report.C1ReportViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.UI.C1ToolsPaneTemplate"/> class.
            </summary>
            <param name="reportViewer">The report viewer.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.C1ToolsPaneTemplate.InstantiateIn(System.Web.UI.Control)">
            <summary>
            Defines the System.Web.UI.Control object that
            child controls and templates belong to. These child controls are in turn
            defined within an inline template.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="P:C1.Web.UI.Controls.C1Report.UI.C1ToolsPaneTemplate.ToolsPane">
            <summary>
            Gets the tools pane.
            </summary>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.UI.Tools.C1OutlineTool">
            <summary>
            Outline Tool.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.Tools.C1OutlineTool.#ctor(C1.Web.UI.Controls.C1Report.C1ReportViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.UI.Tools.C1OutlineTool"/> class.
            </summary>
            <param name="reportViewer">The c1 report viewer.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.Tools.C1OutlineTool.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.Tools.C1OutlineTool.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.C1Report.UI.Tools.C1SearchTool">
            <summary>
            Outline Tool.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.Tools.C1SearchTool.#ctor(C1.Web.UI.Controls.C1Report.C1ReportViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.C1Report.UI.Tools.C1OutlineTool"/> class.
            </summary>
            <param name="reportViewer">The c1 report viewer.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.C1Report.UI.Tools.C1SearchTool.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the control to the specified writer. This method is used primarily by control developers.
            </summary>
            <param name="writer">A <see cref="T:System.Web.UI.HtmlTextWriter"/> that represents the output stream to render HTML content on the client.</param>
        </member>
        <member name="T:C1.Web.UI.Controls.Design.C1ReportViewerDesigner">
            <summary>
            C1ReportViewer Control Designer.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.C1ReportViewerDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the control designer and loads the specified component.
            </summary>
            <param name="component">The control being designed.</param>
        </member>
        <member name="P:C1.Web.UI.Controls.Design.C1ReportViewerDesigner.UsePreviewControl">
            <summary>
            Gets a value indicating whether the control designer uses a temporary preview control to generate the design-time HTML markup.
            </summary>
            <value></value>
            <returns>true, if the control designer uses a temporary copy of the control for design-time preview; otherwise, false, if the control designer uses the <see cref="P:System.ComponentModel.Design.ComponentDesigner.Component"/> property for the control contained in the control designer.
            </returns>
        </member>
        <member name="P:C1.Web.UI.Controls.Design.C1ReportViewerDesigner.UploadControl">
            <summary>
            Gets the upload control.
            </summary>
            <value>The upload control.</value>
        </member>
        <member name="P:C1.Web.UI.Controls.Design.C1ReportViewerDesigner.ActionLists">
            <summary>
            Gets the action list collection for the control designer.
            </summary>
            <value></value>
            <returns>
            A <see cref="T:System.ComponentModel.Design.DesignerActionListCollection"/> object that contains the <see cref="T:System.ComponentModel.Design.DesignerActionList"/> items for the control designer.
            </returns>
        </member>
        <member name="T:C1.Web.UI.Controls.Design.BaseDesignerActionList">
            <summary>
            
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.BaseDesignerActionList.#ctor(System.Web.UI.Design.ControlDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Web.UI.Controls.Design.BaseDesignerActionList"/> class.
            </summary>
            <param name="designer">The designer associated with this action list.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.BaseDesignerActionList.GetProperty(System.Object,System.String)">
            <summary>
            Gets the PropertyDescriptor associated with the given property name.
            </summary>
            <param name="obj">The object that contains the property.</param>
            <param name="propname">The property name.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.BaseDesignerActionList.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of a property.
            </summary>
            <param name="propname">The property name.</param>
            <param name="val">The new value.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.BaseDesignerActionList.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property.
            </summary>
            <param name="obj">The object that contains the property.</param>
            <param name="propname">The property name.</param>
            <param name="val">The new value.</param>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.BaseDesignerActionList.About">
            <summary>
            Displays the about box.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.BaseDesignerActionList.GetSortedActionItems">
            <summary>
            Returns the collection of <see cref="T:System.ComponentModel.Design.DesignerActionItem"/> objects contained in the list.
            </summary>
            <remarks>This method can not be overridden.</remarks>
            <returns>
            A <see cref="T:System.ComponentModel.Design.DesignerActionItem"/> array that contains the items in this list.
            </returns>        
        </member>
        <member name="T:C1.Web.UI.Controls.Design.SubreportFieldConverter">
            <summary>
            <see cref="T:System.ComponentModel.TypeConverter"/> used to edit properties that represent reports.
            </summary>
            <remarks>
            <para><see cref="T:C1.Web.UI.Controls.Design.SubreportFieldConverter"/> provides a list of available reports.</para>
            <para>You can use this <see cref="T:System.ComponentModel.TypeConverter"/> in classes that derive from <see cref="!:Field"/> to 
            edit properties that represent reports.</para>
            </remarks>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>True if <paramref name="type"/> is string, false otherwise.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>A <see cref="N:C1.Web.UI.Controls.C1Report"/> object with the specified name, or null if no report by the specified name 
            could be found in the report definition file.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>True if <paramref name="type"/> is string, false otherwise.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="type">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>The name of the report if <paramref name="type"/> is string, null otherwise.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True because <see cref="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/> should be called to find the properties of this object.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from 
            <see cref="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/> is an exclusive list of possible values, 
            using the specified context.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>True because the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned 
            from <see cref="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/> is an exhaustive list of possible values.</returns>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of report names.
            </summary>
            <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be 
            used to extract additional information about the environment from which this converter is invoked. 
            This parameter or properties of this parameter can be a null reference (Nothing in Visual Basic).</param>
            <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values.</returns>
        </member>
        <member name="T:C1.Web.UI.Controls.Design.ReportFileLocationEditor">
            <summary>
            ReportFile Location Editor.
            </summary>
        </member>
        <member name="M:C1.Web.UI.Controls.Design.ReportFileLocationEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:C1.Web.UI.Controls.Design.ReportHelper">
            <summary>
            static utilities
            </summary>
        </member>
    </members>
</doc>
