#region Usings

using System;
using System.ComponentModel;
using System.IO;
using Urbetrack.Postal.Sync.BaseClasses;
using Urbetrack.Postal.Sync.Helpers;
using Urbetrack.Postal.Sync.SQLite.DataAccessObjects.Factories;
using Urbetrack.Types.BusinessObjects.Postal;
using System.Windows.Forms;

#endregion

namespace Urbetrack.Postal.Sync.Forms
{
    /// <summary>
    /// La postal sincronization util main form.
    /// </summary>
    public partial class Main : BaseForm
    {
        #region Constructors

        /// <summary>
        /// Initialice components and device state.
        /// </summary>
        public Main() { InitializeComponent(); }

        #endregion

        #region Protected Methods

        /// <summary>
        /// Displays currently available routes.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e) { BindAvailableRoutes(); }

        /// <summary>
        /// Dispose all assigned resources.
        /// </summary>
        /// <param name="e"></param>
        protected override void OnClosing(CancelEventArgs e)
        {
            try
            {
                DeleteTemporaryFilesAndDirectories();
            }
            catch(Exception ex)
            {
                Tracer.TraceException(ex);
            }
            finally
            {
                DisposeResources();

                Environment.Exit(0);
            }
        }

        #endregion

        #region Public Methods

        /// <summary>
        /// Refresh the currently available routes.
        /// </summary>
        public void RefreshRoutes() { BindAvailableRoutes(); }

        #endregion

        #region Private Methods

        /// <summary>
        /// Deletes all autogenerated temporary files and directories.
        /// </summary>
        private static void DeleteTemporaryFilesAndDirectories() { if (Directory.Exists(Configuration.TemporaryPath)) Directory.Delete(Configuration.TemporaryPath, true); }

        /// <summary>
        /// Retrieves the list of currently available routes.
        /// </summary>
        private void BindAvailableRoutes()
        {
            try 
            {
                lbRoutes.DataSource = DaoFactory.RutaDAO.GetAvailableDistributors(0);
            }
            catch (Exception ex) { InformsException(ex, "Ocurrio un error intentando obtener las rutas disponibles."); }
        }

        /// <summary>
        /// Connects to the currently pluged-in device.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnConnectClick(Object sender, EventArgs e)
        {
            try
            {
                ShowStatusForm("Conectando ...");

                InitializeConnection();

                CopyDatabaseFromDevice();

                DisplayRouteInformation();

                EnableSyncronization();
            }
            catch (Exception ex)
            {
                EnableConnection();

                InformsException(ex, "Error al conectarse con el equipo, asegurese que el mismo este correctamente conectado al equipo y configurado en Urbetrack.");
            }
            finally
            {
                CloseStatusForm();
            }
        }

        /// <summary>
        /// Prepares the program to accept syncronizations.
        /// </summary>
        private void EnableSyncronization() { lbRoutes.Enabled = true; }

        /// <summary>
        /// Tries to connect to the currently pluged-in device.
        /// </summary>
        private void InitializeConnection()
        {
            lblDevice.Text = ActiveSyncHelper.GetDeviceCode();

            ValidateDevice();

            DisableConnection();
        }

        /// <summary>
        /// Validates that the connected device is configured in Urbetrack.
        /// </summary>
        private void ValidateDevice()
        {
            var device = DaoFactory.DispositivoDAO.GetByCode(lblDevice.Text);

            if (device == null) throw new Exception(String.Format("El dispositivo {0} no esta configurado en Urbetrack.", lblDevice.Text));
        }

        /// <summary>
        /// Disables the posibility of connecting a new device.
        /// </summary>
        private void DisableConnection()
        {
            btnDisconnect.Enabled = true;
            btnConnect.Enabled = false;
        }

        /// <summary>
        /// Enables the sincronizer to stablish a new connection.
        /// </summary>
        private void EnableConnection()
        {
            lblDevice.Text = String.Empty;

            btnDisconnect.Enabled = false;
            btnConnect.Enabled = true;

            lbRoutes.Enabled = false;
        }

        /// <summary>
        /// Copies the database file from the current pluged-in device.
        /// </summary>
        private static void CopyDatabaseFromDevice()
        {
            var remoteDatabaseFile = Path.Combine(Configuration.PdaDatabaseFilePath, Configuration.PdaDatabaseFileName);
            var localImportDatabaseFile = Path.Combine(Configuration.TemporaryImportPath, Configuration.PdaDatabaseFileName);

            if (!Directory.Exists(Configuration.TemporaryImportPath)) Directory.CreateDirectory(Configuration.TemporaryImportPath);
            else if (File.Exists(localImportDatabaseFile)) File.Delete(localImportDatabaseFile);
                
            ActiveSyncHelper.CopyFromDevice(remoteDatabaseFile, localImportDatabaseFile);
        }

        /// <summary>
        /// Syncronice all the data retrieved from the device into urbetrack database.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnSyncClick(Object sender, EventArgs e)
        {
            if (!ValidateMobile()) return; 

            try
            {
                ShowStatusForm("Sincronizando ...");

                SendDataToUrbetrack();
            }
            catch (Exception ex)
            {
                InformsException(ex, "Se produjo un error sincronizando la ruta obtenida hacia urbetrack.");
            }
            finally
            {
                CloseStatusForm();
            }
        }

        /// <summary>
        /// Determines if the target mobile was the recently connected device.
        /// </summary>
        /// <returns></returns>
        private Boolean ValidateMobile()
        {
            var code = ActiveSyncHelper.GetDeviceCode();

            return lblDevice.Text.Equals(code);
        }

        /// <summary>
        /// Generates and sends to the device all necesary information about the currently selected route.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnSendRouteClick(Object sender, EventArgs e)
        {
            if (!ValidateMobile()) return;
            try
            {
                var routeNumber = GetRutaToSync();
                if(!string.IsNullOrEmpty(routeNumber))
                {
                    var confirm = MessageBox.Show("El dispositivo contiene datos de la ruta " + routeNumber + ". ¿Está seguro que desea actualizar los datos?", "Sincronizador", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                    if (confirm == DialogResult.No) return;
                }
            
                ShowStatusForm("Sincronizando ...");

                GenerateSqliteDatabase();

                SendToMobile();

                DisableSyncronization();
            }
            catch(Exception ex)
            {
                InformsException(ex, "Se produjo un error intentando generar y enviar la ruta seleccionada a la PDA.");
            }
            finally
            {
                CloseStatusForm();
            }
        }

        /// <summary>
        /// Disables the routes syncronization for the current device.
        /// </summary>
        private void DisableSyncronization()
        {
            btnSendRoute.Enabled = false;
            lbRoutes.Enabled = false;
        }

        /// <summary>
        /// Sends the generated sqlite database to the mobile.
        /// </summary>
        private static void SendToMobile()
        {
            var remoteDatabaseFile = Path.Combine(Configuration.PdaDatabaseFilePath, Configuration.PdaDatabaseFileName);
            var localExportDatabaseFile = Path.Combine(Configuration.TemporaryExportPath, Configuration.PdaDatabaseFileName);

            ActiveSyncHelper.CopyToDevice(localExportDatabaseFile, remoteDatabaseFile);
        }

        /// <summary>
        /// Opens the route administration window form.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnAdminRouteClick(Object sender, EventArgs e)
        {
            var adminForm = new AdminRoutes(this);
            
            adminForm.Show(this);
        }

        /// <summary>
        /// Displays information about the route imported from the currently connected device.
        /// </summary>
        private void DisplayRouteInformation()
        {
            var localImportDatabaseFile = Path.Combine(Configuration.TemporaryImportPath, Configuration.PdaDatabaseFileName);

            if (!File.Exists(localImportDatabaseFile)) HideRouteDetails();
            else ShowRouteDetails();
        }

        /// <summary>
        /// Disconects the currently pluged-in device and eliminates all temporal files and directories.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnDisconnectClick(Object sender, EventArgs e)
        {
            try
            {
                DeleteTemporaryFilesAndDirectories();
            }
            catch(Exception ex)
            {
                Tracer.TraceException(ex);
            }
            finally
            {
                EnableConnection();

                DisplayRouteInformation();
            }
        }

        /// <summary>
        /// Enables or desables the route syncronization button.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void LbRoutesSelectedIndexChanged(Object sender, EventArgs e) { btnSendRoute.Enabled = lbRoutes.SelectedItems.Count > 0 && lblDevice.Text != String.Empty; }

        /// <summary>
        /// </summary>
        private void GenerateSqliteDatabase()
        {
        /// Generates the sqlite database with all the necesary information retrieved from urbetrack.
            //try
            //{
                var daoFactory = new DataAccessFactory(Configuration.TemporaryExportPath, Configuration.PdaDatabaseFileName, true);

                using (daoFactory)
                {
                    var distributor = lbRoutes.SelectedItem as GrupoRuta;

                    daoFactory.DistribuidorDAO.InsertForDistributor(distributor);

                    daoFactory.ReasonDAO.InsertForDistributor(distributor);

                    daoFactory.ServiceTypeDAO.InsertForDistributor(distributor);

                    daoFactory.RouteDAO.InsertForDistributor(distributor);
                }

                BindAvailableRoutes();
            //}
            //catch(Exception ex) { InformsException(ex, "Se produjo un error intentando exportar los datos de la ruta seleccionada."); }
        }

        /// <summary>
        /// Send information about the loaded route into urbetrack database.
        /// </summary>
        private void SendDataToUrbetrack()
        {
            try
            {
                var daoFactory = new DataAccessFactory(Configuration.TemporaryImportPath, Configuration.PdaDatabaseFileName, false);

                using (daoFactory)
                {
                    daoFactory.RouteDAO.UpdateRoutesInUrbetrack();

                    daoFactory.RouteDAO.DeleteRoutes();
                }

                ReplaceMobileDatabase();

                HideRouteDetails();
            }
            catch(Exception ex)
            {
                InformsException(ex, "Se produjo un error intentando actualizar las rutas en Urbetrack.");
            }
        }

        /// <summary>
        /// Replace the current mobile database to eliminate all syncronized routes.
        /// </summary>
        private static void ReplaceMobileDatabase()
        {
            var localImportDatabaseFile = Path.Combine(Configuration.TemporaryImportPath, Configuration.PdaDatabaseFileName);
            var remoteDatabaseFile = Path.Combine(Configuration.PdaDatabaseFilePath, Configuration.PdaDatabaseFileName);
                    
            ActiveSyncHelper.CopyToDevice(localImportDatabaseFile, remoteDatabaseFile);
        }

        private string GetRutaToSync()
        {
            try
            {
                using (var daoFactory = new DataAccessFactory(Configuration.TemporaryImportPath, Configuration.PdaDatabaseFileName, false))
                {
                    return daoFactory.RouteDAO.GetPdaRoute();
                }

            }
            catch (Exception ex)
            {
                return string.Empty;
            }
        }

        /// <summary>
        /// Displays details about the current loaded route.
        /// </summary>
        private void ShowRouteDetails()
        {
            var daoFactory = new DataAccessFactory(Configuration.TemporaryImportPath, Configuration.PdaDatabaseFileName, false);

            using (daoFactory)
            {
                var distributor = daoFactory.RouteDAO.GetPdaDistributor();

                if (distributor == null) HideRouteDetails();
                else
                {
                    lblDistributor.Text = distributor.Usuario;

                    btnSync.Enabled = true;
                }
            }
        }

        /// <summary>
        /// Hides information about the current loaded route.
        /// </summary>
        private void HideRouteDetails()
        {
            lblDistributor.Text = String.Empty;

            btnSync.Enabled = false;
        }

        #endregion
    }
}
